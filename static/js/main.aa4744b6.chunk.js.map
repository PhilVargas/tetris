{"version":3,"sources":["components/Cell/Cell.module.scss","components/Legend/Legend.module.scss","components/Overlay/Overlay.module.scss","components/Dashboard/Dashboard.module.scss","components/DisplayPiece/DisplayPiece.module.scss","components/Board/Board.module.scss","components/ThemeSong/ThemeSong.module.scss","typings/index.ts","constants/Settings/BoardSettings/BoardSettings.ts","constants/Settings/BoardSettings/index.ts","constants/Settings/CellSettings/index.ts","constants/Settings/CellSettings/CellSettings.ts","constants/Settings/GameSettings/GameSettings.ts","constants/Settings/GameSettings/index.ts","utils/Calculator.ts","utils/GameUtil.ts","store/game.ts","components/Cell/index.ts","components/Cell/Cell.tsx","components/Board/index.ts","components/Board/Board.tsx","components/Overlay/index.ts","components/Overlay/Overlay.tsx","components/DisplayPiece/index.ts","components/DisplayPiece/DisplayPiece.tsx","components/Legend/index.ts","components/Legend/Legend.tsx","components/Switch/index.ts","components/Switch/Switch.tsx","components/Dashboard/index.ts","components/Dashboard/Dashboard.tsx","components/ThemeSong/index.ts","components/ThemeSong/ThemeSong.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CellType","BoardSettings","height","width","hiddenRows","yCoord","xCoord","rotation","pieceIds","CellSettings","edgeLength","Pieces","I","O","Z","S","T","J","L","PieceShapeMap","x","y","PossibleBaseScorePerTurn","GameSettings","hasGameBegun","isPaused","initialTurnDelay","totalLinesCleared","score","minimumTurnDelay","isGameOver","isColorblindModeEnabled","isGhostEnabled","isQueuePieceEnabled","canQueuePiece","isAudioMuted","cellIndexFromCoords","coordinate","getCellIdsForPiece","currentPieceType","reduce","cellIds","pieceOffset","push","getCellRows","cells","Array","rows","_","rowStart","slice","isRowFrozen","row","every","cell","cellType","E","hasCollision","nextPieceCoordinate","shape","nextXCoordinate","nextYCoordinate","some","xOffset","yOffset","hasCellCollision","willEncounterXBoundary","willEncounterYBoundary","nextPieceCell","willEncounterFrozenPiece","dropCoordinate","currentCoordinate","nextYCoord","Calculate","didPlayerLose","pieceType","id","turnDelay","level","Math","max","min","floor","scoreThisTurn","linesClearedThisTurn","scoreMultiplier","getCellIdsForGhost","isCollisionFree","currentRotation","rotationDirection","abs","isAnyRowFrozen","getFrozenRowIndices","map","cellRow","index","filter","rowIndex","generateDefaultCells","Calculator","isFrozen","generateShiftedCells","atRowIndex","shiftedId","shiftedCells","shiftedCell","concat","generateRandomPieceType","randomIndex","random","length","GameUtil","freezeCells","includes","scoreRowsForTurn","boardCells","lowestFrozenRowIndex","pop","generateInitialState","nextPieceType","subject","Subject","state","updateCells","ghostPieceIds","boardCell","undefined","ghostType","gameStore","init","next","subscribe","setState","unsubcribe","unsubscribe","startGame","staticSettings","initialState","updatePieceCoordinates","offset","nextXCoord","nextCoord","nextTurn","frozenCells","randomPieceType","defaultXCoord","defaultYCoord","defaultRotation","togglePause","toggleColorblindMode","toggleGhost","toggleQueuePiece","toggleAudio","swapQueuePiece","queuePieceType","newPieceType","newNextPieceType","newQueuePieceType","dropPiece","finalYCoord","rotatePiece","nextRotation","Cell","className","isHidden","isGhost","isPiece","styleProps","computedClassName","cn","styles","wrapper","colorBlind","hiddenRow","ghost","piece","style","Board","key","maxHeight","cellId","generateCells","Overlay","buttonText","audioText","Enabled","Disabled","container","overlayText","onClick","e","preventDefault","icon","faPause","size","DisplayPiece","isEnabled","title","isActive","colorName","pieceCell","colorStyles","displayWrapper","disabled","Legend","code","Switch","labelText","isChecked","onChange","type","checked","Dashboard","onColorblindChange","onGhostChange","onQueueChange","onAudioChange","header","ghostContainer","queueContainer","audioContainer","colorblindContainer","ThemeSong","audioEl","useRef","useEffect","current","pause","play","ref","src","loop","App","useState","gameState","setgameState","setTimeout","tick","clearTimeout","useLayoutEffect","window","addEventListener","overlayProps","boardProps","dashBoardProps","queuePieceProps","nextPieceProps","themeSongProps","target","rel","href","faLinkedin","faGithub","faEnvelope","faStackOverflow","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa4744b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cell_wrapper__2MkW_\",\"hiddenRow\":\"Cell_hiddenRow__RTa-l\",\"ghost\":\"Cell_ghost__187eQ\",\"piece\":\"Cell_piece__2bO9a\",\"cellTypeE\":\"Cell_cellTypeE__1CPQX\",\"cellTypeI\":\"Cell_cellTypeI__2sB7U\",\"colorBlind\":\"Cell_colorBlind__1DC9G\",\"cellTypeO\":\"Cell_cellTypeO__2En99\",\"cellTypeZ\":\"Cell_cellTypeZ__2aDlK\",\"cellTypeS\":\"Cell_cellTypeS__2w4kE\",\"cellTypeT\":\"Cell_cellTypeT__3M3rs\",\"cellTypeJ\":\"Cell_cellTypeJ__2EFPF\",\"cellTypeL\":\"Cell_cellTypeL__aHhEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Legend_wrapper__3DfXQ\",\"code\":\"Legend_code__1_9vG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Overlay_wrapper__3o-Dm\",\"container\":\"Overlay_container__3Xi3_\",\"hide\":\"Overlay_hide__Hd5ip\",\"overlayText\":\"Overlay_overlayText__3baGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dashboard_wrapper__3t_De\",\"header\":\"Dashboard_header__rptyF\",\"colorblindContainer\":\"Dashboard_colorblindContainer__orVmO\",\"ghostContainer\":\"Dashboard_ghostContainer__3q9Wz\",\"queueContainer\":\"Dashboard_queueContainer__1m0cx\",\"audioContainer\":\"Dashboard_audioContainer__2yOL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DisplayPiece_wrapper__16a2b\",\"displayWrapper\":\"DisplayPiece_displayWrapper__2a_HS\",\"disabled\":\"DisplayPiece_disabled__Z2RFP\",\"pieceCell\":\"DisplayPiece_pieceCell__3NiBb\",\"cellTypeI\":\"DisplayPiece_cellTypeI__17qqk\",\"cellTypeO\":\"DisplayPiece_cellTypeO__3qofc\",\"cellTypeS\":\"DisplayPiece_cellTypeS__143xO\",\"cellTypeT\":\"DisplayPiece_cellTypeT__I6KS5\",\"cellTypeZ\":\"DisplayPiece_cellTypeZ__dk7QT\",\"cellTypeJ\":\"DisplayPiece_cellTypeJ__2lXyF\",\"cellTypeL\":\"DisplayPiece_cellTypeL__2XACp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__tPbyu\",\"rows\":\"Board_rows__1ZdPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ThemeSong_wrapper__3J5XB\"};","export enum CellType {\n  E = \"E\",\n  I = \"I\",\n  O = \"O\",\n  Z = \"Z\",\n  S = \"S\",\n  T = \"T\",\n  J = \"J\",\n  L = \"L\"\n}\n\nexport type PieceType = CellType.I | CellType.O | CellType.Z | CellType.S | CellType.T | CellType.J | CellType.L\nexport type PieceTypes = ReadonlyArray<PieceType>\n\nexport interface PieceOffset {\n  readonly x: -2 | -1 | 0 | 1\n  readonly y: -1 | 0 | 1 | 2\n}\n\nexport type Rotation = 0 | 1 | 2 | 3\nexport type RotationDirection = -1 | 1\n\nexport interface Coordinate {\n  readonly xCoord: number\n  readonly yCoord: number\n}\n\nexport type PieceShape = ReadonlyArray<PieceOffset>\nexport type PieceRotations = ReadonlyArray<PieceShape>\nexport type PieceMap = {\n  [key in PieceType]: PieceRotations\n}\n\nexport type LinesCleared = 0 | 1 | 2 | 3 | 4\nexport type BaseScorePerTurn = 0 | 40 | 100 | 300 | 1200\nexport type Level = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10\nexport interface IScoredBoardCells {\n  cells: BoardCells\n  scoreThisTurn: number\n  linesClearedThisTurn: LinesCleared\n}\n\nexport interface IBoardSettings {\n  height: number\n  width: number\n  hiddenRows: number\n  yCoord: number\n  xCoord: number\n  pieceIds: Array<number>\n  rotation: Rotation\n}\n\nexport interface ICellSettings {\n  edgeLength: number\n}\nexport interface ICellProps {\n  className?: string\n  isHidden: boolean\n  isGhost: boolean\n  isPiece: boolean\n  width: number\n  height: number\n  cellType: CellType\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n}\n\nexport interface IGameSettings {\n  hasGameBegun: boolean\n  isPaused: boolean\n  initialTurnDelay: number\n  totalLinesCleared: number\n  score: number\n  minimumTurnDelay: number\n  isGameOver: boolean\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  canQueuePiece: boolean\n  isAudioMuted: boolean\n}\n\nexport interface ISettings {\n  BoardSettings: IBoardSettings\n  CellSettings: ICellSettings\n  GameSettings: IGameSettings\n}\n\nexport interface IBoardCell {\n  id: number\n  yCoord: number\n  xCoord: number\n  isFrozen: boolean\n  cellType: CellType\n  pieceType?: PieceType\n  ghostType?: PieceType\n}\n\nexport type BoardCells = Array<IBoardCell>\n\nexport interface IBoardProps {\n  cells: BoardCells\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n}\n\nexport interface IGameState {\n  xCoord: number\n  yCoord: number\n  cells: BoardCells\n  currentPieceType: PieceType\n  nextPieceType: PieceType\n  queuePieceType?: PieceType\n  pieceIds: Array<number>\n  rotation: Rotation\n  turnDelay: number\n  isPaused: boolean\n  hasGameBegun: boolean\n  totalLinesCleared: number\n  score: number\n  isGameOver: boolean\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  canQueuePiece: boolean\n  isAudioMuted: boolean\n}\n\nexport interface IOverlayProps {\n  isGameOver: boolean\n  isPaused: boolean\n  hasGameBegun: boolean\n  score: number\n  isAudioMuted: boolean\n  startGame: () => void\n}\n\nexport interface ILegendProps {\n  score: number\n  level: Level\n}\nexport interface IDisplayPieceProps {\n  pieceType?: PieceType\n  isEnabled: boolean\n  isActive: boolean\n  title: string\n  isColorblindModeEnabled: boolean\n}\n\nexport interface IPersistentSettings {\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  isAudioMuted: boolean\n}\n\nexport interface IDashboardProps extends IPersistentSettings {\n  onColorblindChange: () => void\n  onGhostChange: () => void\n  onQueueChange: () => void\n  onAudioChange: () => void\n}\n\nexport interface ISwitchProps {\n  className?: string\n  labelText?: string\n  isChecked: boolean\n  onChange: () => void\n}\n\nexport interface IThemeSongProps {\n  isAudioMuted: boolean\n  isPaused: boolean\n  hasGameBegun: boolean\n}\n","import { IBoardSettings } from '../../../typings'\n\nconst BoardSettings: IBoardSettings = {\n  height: 21,\n  width: 10,\n  hiddenRows: 1,\n  yCoord: 1,\n  xCoord: 4,\n  rotation: 0,\n  pieceIds: [],\n}\n\nexport default BoardSettings\n","import BoardSettings from './BoardSettings'\n\nexport default BoardSettings\n","import CellSettings from './CellSettings'\n\nexport default CellSettings\n","import { ICellSettings } from '../../../typings'\n\nconst CellSettings: ICellSettings = {\n  edgeLength: 25,\n}\n\nexport default CellSettings\n","import { IGameSettings, CellType, PieceTypes, PieceMap, BaseScorePerTurn } from '../../../typings'\n\nexport const Pieces: PieceTypes = [\n  CellType.I,\n  CellType.O,\n  CellType.Z,\n  CellType.S,\n  CellType.T,\n  CellType.J,\n  CellType.L\n]\n\nexport const PieceShapeMap: PieceMap = {\n  [CellType.I]: [\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: -2, y: 2 },\n      { x: -1, y: 2 },\n      { x: 0, y: 2 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: -1, y: 0 },\n      { x: -1, y: 1 },\n      { x: -1, y: 2 },\n      { x: -1, y: -1 }\n    ],\n    [\n      { x: -2, y: 1 },\n      { x: -1, y: 1 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 }\n    ],\n  ],\n  [CellType.O]: [\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ]\n  ],\n  [CellType.Z]: [\n    [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: -1 },\n      { x: -1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: 1, y: 0 },\n      { x: 1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: -1 },\n      { x: -1, y: 0 },\n      { x: -1, y: 1 }\n    ],\n  ],\n  [CellType.S]: [\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: -1 },\n      { x: 1, y: 0 },\n      { x: 1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n      { x: -1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 }\n    ],\n  ],\n  [CellType.T]: [\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 0, y: -1 },\n      { x: 1, y: 0 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: -1 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 0, y: -1 },\n      { x: 0, y: 1 }\n    ],\n  ],\n  [CellType.J]: [\n    [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: 0, y: -1 },\n      { x: -1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 1, y: 0 },\n      { x: 1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: -1 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 }\n    ],\n  ],\n  [CellType.L]: [\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: 1, y: 0 },\n      { x: 1, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: -1 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: 1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: 0, y: -1 },\n      { x: -1, y: -1 }\n    ],\n  ],\n}\n\nexport const PossibleBaseScorePerTurn: Array<BaseScorePerTurn> = [0, 40, 100, 300, 1200]\n\nexport const ThemeSongUrl = \"https://raw.githubusercontent.com/PhilVargas/tetris/master/public/assets/music/Tetris%20Theme%20-%20Long.ogg\"\n\nconst GameSettings: IGameSettings = {\n  hasGameBegun: false,\n  isPaused: false,\n  initialTurnDelay: 500,\n  totalLinesCleared: 0,\n  score: 0,\n  minimumTurnDelay: 50,\n  isGameOver: false,\n  isColorblindModeEnabled: false,\n  isGhostEnabled: true,\n  isQueuePieceEnabled: true,\n  canQueuePiece: true,\n  isAudioMuted: false,\n}\n\nexport default GameSettings\n","import GameSettings from './GameSettings'\nexport * from './GameSettings'\n\nexport default GameSettings\n","import { PieceType, PieceShape, PieceOffset, Coordinate, Rotation, RotationDirection, BoardCells, CellType, IBoardCell, LinesCleared, Level } from '../typings'\nimport { GameSettings, BoardSettings, PieceShapeMap, PossibleBaseScorePerTurn } from '../constants/Settings'\n\nconst cellIndexFromCoords = (coordinate: Coordinate): number => {\n  const { xCoord, yCoord } = coordinate\n  return xCoord + (BoardSettings.width * yCoord)\n}\n\nconst getCellIdsForPiece = (coordinate: Coordinate, rotation: Rotation, currentPieceType: PieceType): Array<number> => {\n  const { xCoord, yCoord } = coordinate\n  const shape: PieceShape = PieceShapeMap[currentPieceType][rotation]\n  return shape.reduce((cellIds: Array<number>, pieceOffset: PieceOffset): Array<number> => {\n    let offsetXCoord = xCoord + pieceOffset.x\n    let offsetYCoord = yCoord + pieceOffset.y\n    const coordinate: Coordinate = { xCoord: offsetXCoord, yCoord: offsetYCoord }\n    cellIds.push(cellIndexFromCoords(coordinate))\n    return cellIds\n  }, [])\n}\n\nconst getCellRows = (cells: BoardCells): Array<BoardCells> => {\n  return [...Array(BoardSettings.height)].reduce((rows: Array<BoardCells>, _, rowStart: number) => {\n    rows.push(cells.slice(rowStart * BoardSettings.width, (rowStart + 1) * BoardSettings.width))\n    return rows\n  }, [])\n}\n\nconst isAnyRowFrozen = (cells: BoardCells): boolean => {\n  return getCellRows(cells).some(isRowFrozen)\n}\n\nconst getFrozenRowIndices = (cells: BoardCells): Array<number> => {\n  return getCellRows(cells).map((cellRow: BoardCells, index: number): number => {\n    return isRowFrozen(cellRow) ? index : -1\n  }).filter((rowIndex: number) => rowIndex >= 0)\n}\n\nconst isRowFrozen = (row: BoardCells): boolean => {\n  return row.every((cell: IBoardCell) => {\n    return cell.cellType !== CellType.E\n  })\n}\n\nconst isCollisionFree = (nextPieceCoordinate: Coordinate, rotation: Rotation, currentPieceType: PieceType, cells: BoardCells): boolean => {\n  return !hasCollision(nextPieceCoordinate, rotation, currentPieceType, cells)\n}\n\nconst hasCollision = (nextPieceCoordinate: Coordinate, rotation: Rotation, currentPieceType: PieceType, cells: BoardCells): boolean => {\n  const shape = PieceShapeMap[currentPieceType][rotation]\n  const { xCoord: nextXCoordinate, yCoord: nextYCoordinate } = nextPieceCoordinate\n  return shape.some((pieceOffset: PieceOffset) => {\n    const { x: xOffset, y: yOffset } = pieceOffset\n    const nextCellCoordinate: Coordinate = { xCoord: nextXCoordinate + xOffset, yCoord: nextYCoordinate + yOffset }\n    return hasCellCollision(nextCellCoordinate, cells)\n  })\n}\n\nconst hasCellCollision = (nextPieceCoordinate: Coordinate, cells: BoardCells): boolean => {\n  const { xCoord: nextXCoordinate, yCoord: nextYCoordinate } = nextPieceCoordinate\n  const willEncounterXBoundary = nextXCoordinate < 0 || nextXCoordinate >= BoardSettings.width\n  const willEncounterYBoundary = nextYCoordinate >= BoardSettings.height\n  // const nextPieceCell = cells[cellIndexFromCoords(nextPieceCoordinate)] as IBoardCell?\n  const nextPieceCell = cells[cellIndexFromCoords(nextPieceCoordinate)] as IBoardCell | null\n  const willEncounterFrozenPiece = nextPieceCell != null && nextPieceCell.cellType !== CellType.E\n  return willEncounterXBoundary || willEncounterYBoundary || willEncounterFrozenPiece\n}\n\nconst rotation = (currentRotation: Rotation, rotationDirection: RotationDirection): Rotation => {\n  return Math.abs((4 + currentRotation + rotationDirection) % 4) as Rotation\n}\n\nconst dropCoordinate = (cells: BoardCells, rotation: Rotation, currentPieceType: PieceType, currentCoordinate: Coordinate): Coordinate => {\n  const { xCoord, yCoord } = currentCoordinate\n  let nextYCoord = yCoord\n  while (!hasCollision({ xCoord, yCoord: nextYCoord + 1 }, rotation, currentPieceType, cells)) {\n    nextYCoord++\n  }\n  return { xCoord, yCoord: nextYCoord }\n}\n\nconst getCellIdsForGhost = (cells: BoardCells, rotation: Rotation, currentPieceType: PieceType, currentCoordinate: Coordinate): Array<number> => {\n  const { xCoord } = currentCoordinate\n  const { yCoord } = dropCoordinate(cells, rotation, currentPieceType, currentCoordinate)\n  return getCellIdsForPiece({ xCoord, yCoord }, rotation, currentPieceType)\n}\n\nconst level = (totalLinesCleared: number): Level => {\n  return Math.min(10, Math.floor(totalLinesCleared / 10)) as Level\n}\n\nconst scoreThisTurn = (linesClearedThisTurn: LinesCleared, scoreMultiplier: Level): number => {\n  return PossibleBaseScorePerTurn[linesClearedThisTurn] * (1 + scoreMultiplier)\n}\n\nconst turnDelay = (level: Level) => {\n  return Math.max(GameSettings.minimumTurnDelay, GameSettings.initialTurnDelay - (50 * level))\n}\n\nconst didPlayerLose = (cells: BoardCells): boolean => {\n  return cells.some((cell: IBoardCell) => {\n    return cell.pieceType != null && cell.id < BoardSettings.width * BoardSettings.hiddenRows\n  })\n}\n\nconst Calculate = {\n  didPlayerLose,\n  turnDelay,\n  level,\n  scoreThisTurn,\n  cellIndexFromCoords,\n  dropCoordinate,\n  getCellIdsForPiece,\n  getCellIdsForGhost,\n  hasCollision,\n  isCollisionFree,\n  rotation,\n  getCellRows,\n  isAnyRowFrozen,\n  getFrozenRowIndices,\n}\n\nexport default Calculate\n","import { IBoardCell, CellType, IGameState, PieceType, BoardCells, IScoredBoardCells, LinesCleared } from '../typings'\nimport { BoardSettings, GameSettings } from '../constants/Settings'\nimport Calculator from './Calculator'\nimport { Pieces } from '../constants/Settings/GameSettings'\n\nconst generateDefaultCells = (rows = BoardSettings.height): Array<IBoardCell> => {\n  return [...Array(rows)].reduce((cells: Array<IBoardCell>, _, yCoord: number) => {\n    return [...Array(BoardSettings.width)].reduce((cells: Array<IBoardCell>, _, xCoord: number) => {\n      cells.push({\n        id: Calculator.cellIndexFromCoords({ xCoord, yCoord }),\n        yCoord,\n        xCoord,\n        isFrozen: false,\n        cellType: CellType.E\n      })\n      return cells\n    }, cells)\n  }, [])\n}\n\nconst generateShiftedCells = (atRowIndex: number, cells: BoardCells): BoardCells => {\n  const shiftedId = (atRowIndex + 1) * BoardSettings.width\n  const shiftedCells = cells.map((shiftedCell: IBoardCell): IBoardCell => {\n    if (shiftedCell.id < shiftedId) {\n      const cell = cells[shiftedCell.id - BoardSettings.width]\n      return { ...cell, id: shiftedCell.id }\n    } else {\n      return shiftedCell\n    }\n  }).slice(BoardSettings.width, BoardSettings.height * BoardSettings.width)\n  const emptyCells = generateDefaultCells(1)\n  return emptyCells.concat(shiftedCells)\n}\n\nconst scoreRowsForTurn = (boardCells: BoardCells, totalLinesCleared: number): IScoredBoardCells => {\n  let linesClearedThisTurn: LinesCleared = 0\n  let cells = [...boardCells]\n  while (Calculator.isAnyRowFrozen(cells)) {\n    linesClearedThisTurn = linesClearedThisTurn + 1 as LinesCleared\n    let lowestFrozenRowIndex = Calculator.getFrozenRowIndices(cells).pop()\n    if (lowestFrozenRowIndex == null) { break }\n    cells = generateShiftedCells(lowestFrozenRowIndex, cells)\n  }\n  const scoreThisTurn = Calculator.scoreThisTurn(linesClearedThisTurn, Calculator.level(totalLinesCleared))\n  return { cells, scoreThisTurn, linesClearedThisTurn }\n}\nconst generateRandomPieceType = (): PieceType => {\n  const randomIndex = Math.floor(Math.random() * Pieces.length)\n  return Pieces[randomIndex]\n}\n\nconst freezeCells = (cells: BoardCells, pieceIds: Array<number>, currentPieceType: PieceType): BoardCells => {\n  return cells.map((cell: IBoardCell) => {\n    if (pieceIds.includes(cell.id)) {\n      cell.cellType = currentPieceType\n    }\n    return cell\n  })\n}\n\nconst GameUtil = {\n  generateDefaultCells,\n  generateRandomPieceType,\n  generateShiftedCells,\n  freezeCells,\n  scoreRowsForTurn,\n  generateInitialState: (): IGameState => {\n    return {\n      isGameOver: GameSettings.isGameOver,\n      xCoord: BoardSettings.xCoord,\n      yCoord: BoardSettings.yCoord,\n      pieceIds: BoardSettings.pieceIds,\n      rotation: BoardSettings.rotation,\n      isPaused: GameSettings.isPaused,\n      hasGameBegun: GameSettings.hasGameBegun,\n      totalLinesCleared: GameSettings.totalLinesCleared,\n      score: GameSettings.score,\n      turnDelay: GameSettings.initialTurnDelay,\n      cells: generateDefaultCells(),\n      currentPieceType: generateRandomPieceType(),\n      nextPieceType: generateRandomPieceType(),\n      isColorblindModeEnabled: GameSettings.isColorblindModeEnabled,\n      isGhostEnabled: GameSettings.isGhostEnabled,\n      isQueuePieceEnabled: GameSettings.isQueuePieceEnabled,\n      canQueuePiece: GameSettings.canQueuePiece,\n      isAudioMuted: GameSettings.isAudioMuted,\n    }\n  }\n}\n\nexport default GameUtil\n","import { Subject } from 'rxjs'\nimport { Dispatch, SetStateAction } from 'react'\n\nimport GameUtil from '../utils/GameUtil'\nimport { IGameState, IBoardCell, PieceOffset, BoardCells, PieceType, Coordinate, RotationDirection, IPersistentSettings } from '../typings'\nimport Calculate from '../utils/Calculator'\nimport { BoardSettings } from '../constants/Settings'\n\nconst subject = new Subject<IGameState>()\n\nlet state = GameUtil.generateInitialState()\n\nconst updateCells = (cells: BoardCells, currentPieceType: PieceType, pieceIds: Array<number>, ghostPieceIds: Array<number>): BoardCells => {\n  return cells.map((boardCell: IBoardCell) => {\n    if (pieceIds.includes(boardCell.id)) {\n      boardCell.pieceType = currentPieceType\n    } else {\n      boardCell.pieceType = undefined\n    }\n\n    if (ghostPieceIds.includes(boardCell.id)) {\n      boardCell.ghostType = currentPieceType\n    } else {\n      boardCell.ghostType = undefined\n    }\n    return boardCell\n  })\n}\n\nconst freezeCells = (cells: BoardCells): BoardCells => {\n  return cells.map((boardCell: IBoardCell) => {\n    if (boardCell.pieceType != null) {\n      boardCell.cellType = boardCell.pieceType\n    }\n    return boardCell\n  })\n}\n\nconst updatePieceCoordinates = (offset: PieceOffset) => {\n  const { x: xOffset, y: yOffset } = offset\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n  if (!hasGameBegun || isPaused) { return }\n  const nextXCoord = xOffset + xCoord\n  const nextYCoord = yOffset + yCoord\n\n  const nextCoord: Coordinate = { xCoord: nextXCoord, yCoord: nextYCoord }\n  const hasCollision = Calculate.hasCollision(nextCoord, rotation, currentPieceType, state.cells)\n\n  if (hasCollision) { return }\n\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord: nextXCoord, yCoord: nextYCoord }, rotation, currentPieceType)\n  const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, currentPieceType, nextCoord)\n  const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n  state = { ...state, xCoord: nextXCoord, yCoord: nextYCoord, cells }\n  subject.next(state)\n}\n\nconst startGame = () => {\n  const { isAudioMuted, isGhostEnabled, isQueuePieceEnabled, isColorblindModeEnabled } = state\n  const staticSettings: IPersistentSettings = { isAudioMuted, isGhostEnabled, isQueuePieceEnabled, isColorblindModeEnabled }\n  const initialState = GameUtil.generateInitialState()\n  const { xCoord, yCoord, rotation } = initialState\n  const currentPieceType = GameUtil.generateRandomPieceType()\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, rotation, currentPieceType)\n  const ghostPieceIds = Calculate.getCellIdsForGhost(initialState.cells, rotation, currentPieceType, { xCoord, yCoord })\n  const cells = updateCells(initialState.cells, currentPieceType, pieceIds, ghostPieceIds)\n  state = {\n    ...initialState,\n    ...staticSettings,\n    cells,\n    currentPieceType,\n    xCoord: xCoord,\n    yCoord: yCoord,\n    hasGameBegun: true,\n    isPaused: false,\n  }\n\n\n  subject.next(state)\n}\n\nconst togglePause = () => {\n  if (!state.hasGameBegun) { return }\n  state = { ...state, isPaused: !state.isPaused }\n  subject.next(state)\n}\n\nconst nextTurn = () => {\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun, nextPieceType } = state\n  if (!hasGameBegun || isPaused) { return }\n  const nextYCoord = yCoord + 1\n\n  if (Calculate.isCollisionFree({ xCoord, yCoord: nextYCoord }, rotation, currentPieceType, state.cells)) {\n    const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord: nextYCoord }, rotation, currentPieceType)\n    const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, currentPieceType, { xCoord, yCoord: nextYCoord })\n    const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n    state = { ...state, xCoord: xCoord, yCoord: nextYCoord, cells }\n    subject.next(state)\n  } else {\n    const frozenCells = freezeCells(state.cells)\n    if (Calculate.didPlayerLose(frozenCells)) {\n      state = { ...state, isGameOver: true, cells: frozenCells }\n      subject.next(state)\n    } else {\n      const { cells: boardCells, scoreThisTurn, linesClearedThisTurn } = GameUtil.scoreRowsForTurn(frozenCells, state.totalLinesCleared)\n      const randomPieceType = GameUtil.generateRandomPieceType()\n      const { xCoord: defaultXCoord, yCoord: defaultYCoord, rotation: defaultRotation } = BoardSettings\n      const pieceIds = Calculate.getCellIdsForPiece({ xCoord: defaultXCoord, yCoord: defaultYCoord }, defaultRotation, nextPieceType)\n      const ghostPieceIds = Calculate.getCellIdsForGhost(boardCells, defaultRotation, nextPieceType, { xCoord: defaultXCoord, yCoord: defaultYCoord })\n      const cells = updateCells(boardCells, nextPieceType, pieceIds, ghostPieceIds)\n      const totalLinesCleared = state.totalLinesCleared + linesClearedThisTurn\n      state = {\n        ...state,\n        xCoord: defaultXCoord,\n        yCoord: defaultYCoord,\n        currentPieceType: nextPieceType,\n        nextPieceType: randomPieceType,\n        cells,\n        rotation: defaultRotation,\n        totalLinesCleared: totalLinesCleared,\n        turnDelay: Calculate.turnDelay(Calculate.level(totalLinesCleared)),\n        canQueuePiece: true,\n        score: state.score + scoreThisTurn\n      }\n      subject.next(state)\n    }\n  }\n}\n\nconst toggleColorblindMode = () => {\n  state = { ...state, isColorblindModeEnabled: !state.isColorblindModeEnabled }\n  subject.next(state)\n}\n\nconst toggleGhost = () => {\n  state = { ...state, isGhostEnabled: !state.isGhostEnabled }\n  subject.next(state)\n}\n\nconst toggleQueuePiece = () => {\n  state = { ...state, isQueuePieceEnabled: !state.isQueuePieceEnabled }\n  subject.next(state)\n}\n\nconst toggleAudio = () => {\n  state = { ...state, isAudioMuted: !state.isAudioMuted }\n  subject.next(state)\n}\n\nconst swapQueuePiece = () => {\n  const { isQueuePieceEnabled, canQueuePiece, currentPieceType, nextPieceType, queuePieceType } = state\n  if (isQueuePieceEnabled && canQueuePiece) {\n    let newPieceType: PieceType\n    let newNextPieceType: PieceType\n    const newQueuePieceType = currentPieceType\n    if (queuePieceType != null) {\n      newPieceType = queuePieceType\n      newNextPieceType = nextPieceType\n    } else {\n      newPieceType = nextPieceType\n      newNextPieceType = GameUtil.generateRandomPieceType()\n    }\n    const { xCoord, yCoord, rotation } = BoardSettings\n    const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, rotation, newPieceType)\n    const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, newPieceType, { xCoord, yCoord })\n    const cells = updateCells(state.cells, newPieceType, pieceIds, ghostPieceIds)\n    state = { ...state, currentPieceType: newPieceType, nextPieceType: newNextPieceType, queuePieceType: newQueuePieceType, canQueuePiece: false, xCoord, yCoord, rotation, cells }\n    subject.next(state)\n  }\n}\n\nconst gameStore = {\n  generateInitialState: GameUtil.generateInitialState,\n  init: () => subject.next(state),\n  subscribe: (setState: Dispatch<SetStateAction<IGameState>>) => subject.subscribe(setState),\n  unsubcribe: () => { subject.unsubscribe() },\n  startGame,\n  updatePieceCoordinates,\n  nextTurn,\n  togglePause,\n  toggleColorblindMode,\n  toggleGhost,\n  toggleQueuePiece,\n  toggleAudio,\n  swapQueuePiece,\n  dropPiece: () => {\n    const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n    if (!hasGameBegun || isPaused) { return }\n    const { yCoord: finalYCoord } = Calculate.dropCoordinate(state.cells, rotation, currentPieceType, { xCoord, yCoord })\n    let pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord: finalYCoord }, rotation, currentPieceType)\n    let cells = updateCells(state.cells, currentPieceType, pieceIds, pieceIds)\n    state = { ...state, yCoord: finalYCoord, cells }\n    subject.next(state)\n  },\n  rotatePiece: (rotationDirection: RotationDirection) => {\n    const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n    if (!hasGameBegun || isPaused) { return }\n    const nextRotation = Calculate.rotation(rotation, rotationDirection)\n    const nextCoord = { xCoord, yCoord }\n    const hasCollision = Calculate.hasCollision(nextCoord, nextRotation, currentPieceType, state.cells)\n\n    if (hasCollision) { return }\n\n    const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, nextRotation, currentPieceType)\n    const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, nextRotation, currentPieceType, { xCoord, yCoord })\n    const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n    state = { ...state, rotation: nextRotation, cells }\n    subject.next(state)\n  },\n}\n\nexport default gameStore\n","import Cell from './Cell'\n\nexport default Cell\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Cell.module.scss'\nimport { ICellProps } from '../../typings'\n\nconst Cell: FC<ICellProps> = ({ className, isHidden, isGhost, isPiece, cellType, isColorblindModeEnabled, isGhostEnabled, ...styleProps }) => {\n  const computedClassName = cn(className, styles.wrapper, styles[`cellType${cellType}`], {\n    [styles.colorBlind]: isColorblindModeEnabled,\n    [styles.hiddenRow]: isHidden,\n    [styles.ghost]: isGhost && isGhostEnabled,\n    [styles.piece]: isPiece\n  })\n  return (\n    <div style={{ ...styleProps }} className={computedClassName}></div>\n  )\n}\n\nexport default Cell\n","import Board from './Board'\n\nexport default Board\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Board.module.scss'\n\nimport { CellSettings, BoardSettings } from '../../constants/Settings'\nimport Cell from '../Cell'\nimport { IBoardProps, CellType } from '../../typings'\nimport Calculate from '../../utils/Calculator'\n\nconst Board: FC<IBoardProps> = ({ cells, isColorblindModeEnabled, isGhostEnabled }) => {\n  const generateCells = (yCoord: number) => {\n    return [...Array(BoardSettings.width)].map((_, xCoord: number) => {\n      const cellId = Calculate.cellIndexFromCoords({ xCoord, yCoord })\n      const cell = cells[cellId]\n      const cellType: CellType = cell.pieceType || (isGhostEnabled && cell.ghostType) || cell.cellType\n      const isHidden = yCoord < BoardSettings.hiddenRows\n      const isGhost = cell.ghostType != null && cell.pieceType == null\n      const isPiece = cell.pieceType != null\n\n      return <Cell key={cell.id}\n        isHidden={isHidden}\n        isGhost={isGhost}\n        isPiece={isPiece}\n        cellType={cellType}\n        width={CellSettings.edgeLength}\n        height={CellSettings.edgeLength}\n        isColorblindModeEnabled={isColorblindModeEnabled}\n        isGhostEnabled={isGhostEnabled}\n      />\n    })\n  }\n\n  const generateRows = () => {\n    return [...Array(BoardSettings.height)].map((_, yCoord: number) => {\n      return (\n        <div key={yCoord} className={cn(styles.rows, {})} style={{ maxHeight: CellSettings.edgeLength }}>\n          {generateCells(yCoord)}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className={cn(styles.wrapper)}>\n      {generateRows()}\n    </div>)\n}\n\nexport default Board\n","import Overlay from './Overlay'\n\nexport default Overlay\n","import React, { FC, MouseEvent } from 'react'\nimport cn from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Overlay.module.scss'\nimport { IOverlayProps } from '../../typings'\n\n\nconst Overlay: FC<IOverlayProps> = ({ isPaused, hasGameBegun, startGame, score, isGameOver, isAudioMuted }) => {\n  if (hasGameBegun && !isPaused && !isGameOver) { return null }\n\n  const buttonText = cn({\n    \"Start\": !hasGameBegun,\n    \"Restart\": hasGameBegun && isGameOver\n  })\n\n  const onClick = (e: MouseEvent<HTMLButtonElement, any>) => {\n    e.preventDefault()\n    startGame()\n  }\n\n\n  const audioText = cn('Audio is', {\n    Enabled: !isAudioMuted,\n    Disabled: isAudioMuted\n  })\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.container}>\n        {isGameOver &&\n          [\n            <p className={styles.overlayText}>Game over!</p>,\n            <p className={styles.overlayText}>{`Score: ${score}`}</p>\n          ]\n        }\n        {(!hasGameBegun || isGameOver) &&\n          <button className=\"btn\" onClick={onClick}>{buttonText}</button>\n        }\n        {!hasGameBegun &&\n          <p className={styles.overlayText}>({audioText})</p>\n        }\n        {hasGameBegun && !isGameOver &&\n          <div className={styles.overlayText}>\n            <FontAwesomeIcon icon={faPause} size=\"4x\" />\n          </div>\n        }\n      </div>\n    </div >\n  )\n}\n\nexport default Overlay\n","import DisplayPiece from './DisplayPiece'\n\nexport default DisplayPiece\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './DisplayPiece.module.scss'\nimport colorStyles from '../Cell/Cell.module.scss'\nimport { IDisplayPieceProps } from '../../typings'\n\n\nconst DisplayPiece: FC<IDisplayPieceProps> = ({ pieceType, isEnabled, title, isActive, isColorblindModeEnabled }) => {\n  const colorName = `cellType${pieceType}`\n  const className = cn(styles.pieceCell, styles[colorName], colorStyles[colorName], {\n    [colorStyles.colorBlind]: isColorblindModeEnabled\n  })\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div>{title}</div>\n      <div className={cn(styles.displayWrapper, { [styles.disabled]: !isEnabled || pieceType == null || !isActive })}>\n        {isEnabled && pieceType != null &&\n          [\n            <div key={0} className={className}></div>,\n            <div key={1} className={className}></div>,\n            <div key={2} className={className}></div>,\n            <div key={3} className={className}></div>,\n          ]\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default DisplayPiece\n","import Legend from './Legend'\n\nexport default Legend\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Legend.module.scss'\nimport { ILegendProps } from '../../typings'\n\nconst Legend: FC<ILegendProps> = ({ level, score }) => {\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div>score: {score}</div>\n      <div>level: {level}</div>\n      <div>move with <pre className={cn(styles.code)}>ASD</pre></div>\n      <div>drop with <pre className={cn(styles.code)}>ASD</pre></div>\n      <div>rotate with <pre className={cn(styles.code)}>q</pre> & <pre className={cn(styles.code)}>e</pre></div>\n      <div><pre className={cn(styles.code)}>space</pre> to pause</div>\n      <div><pre className={cn(styles.code)}>enter</pre> to queue a piece</div>\n    </div>\n  )\n}\n\nexport default Legend\n","import Switch from './Switch'\n\nexport default Switch\n","import React, { FC } from 'react'\n\nimport { ISwitchProps } from '../../typings'\n\n\n\nconst Switch: FC<ISwitchProps> = ({ className, labelText, isChecked, onChange }) => {\n  return (\n    <label className={className}>\n      <span>{labelText}</span>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange}></input>\n    </label>\n  )\n}\n\nexport default Switch\n","import Dashboard from './Dashboard'\n\nexport default Dashboard\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Dashboard.module.scss'\nimport { IDashboardProps } from '../../typings'\n\nimport Switch from '../Switch'\n\nconst Dashboard: FC<IDashboardProps> = ({ isColorblindModeEnabled, onColorblindChange, isGhostEnabled, onGhostChange, isQueuePieceEnabled, onQueueChange, isAudioMuted, onAudioChange }) => {\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div className={cn(styles.header)}>settings</div>\n      <Switch\n        className={cn(styles.ghostContainer)}\n        labelText={\"ghost\"}\n        isChecked={isGhostEnabled}\n        onChange={onGhostChange}\n      />\n      <Switch\n        className={cn(styles.queueContainer)}\n        labelText={\"queue\"}\n        isChecked={isQueuePieceEnabled}\n        onChange={onQueueChange}\n      />\n      <Switch\n        className={cn(styles.audioContainer)}\n        labelText={\"Music\"}\n        isChecked={!isAudioMuted}\n        onChange={onAudioChange}\n      />\n      <Switch\n        className={cn(styles.colorblindContainer)}\n        labelText={\"colorblind mode\"}\n        isChecked={isColorblindModeEnabled}\n        onChange={onColorblindChange}\n      />\n    </div>\n  )\n}\n\nexport default Dashboard\n","import ThemeSong from './ThemeSong'\n\nexport default ThemeSong\n","import React, { FC, useRef, useEffect } from 'react'\nimport cn from 'classnames'\n\nimport { IThemeSongProps } from '../../typings'\nimport { ThemeSongUrl } from '../../constants/Settings'\n\nimport styles from './ThemeSong.module.scss'\n\nconst ThemeSong: FC<IThemeSongProps> = ({ isAudioMuted, isPaused, hasGameBegun }) => {\n  const audioEl = useRef<HTMLAudioElement>(null)\n\n  useEffect(() => {\n    if (audioEl.current == null) { return }\n    if (isAudioMuted || isPaused || !hasGameBegun) {\n      audioEl.current.pause()\n    } else {\n      audioEl.current.play()\n    }\n  })\n\n  return (\n    <div className={cn(styles.wrapper)}>\n      <audio ref={audioEl} src={ThemeSongUrl} loop />\n    </div>\n  )\n}\n\nexport default ThemeSong\n","import React, { FC, useState, useLayoutEffect, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\nimport { faLinkedin, faGithub, faStackOverflow } from '@fortawesome/free-brands-svg-icons';\nimport './App.scss';\n\nimport { IBoardProps, IDashboardProps, IDisplayPieceProps, IThemeSongProps, IOverlayProps } from './typings';\nimport gameStore from './store/game';\nimport Board from './components/Board'\nimport Overlay from './components/Overlay';\nimport DisplayPiece from './components/DisplayPiece';\nimport Legend from './components/Legend'\nimport Calculate from './utils/Calculator';\nimport Dashboard from './components/Dashboard';\nimport ThemeSong from './components/ThemeSong';\n\nconst App: FC = () => {\n  const [gameState, setgameState] = useState(gameStore.generateInitialState())\n\n  useEffect(() => {\n    let id: NodeJS.Timeout\n\n    function tick() {\n      if (gameState.hasGameBegun && !gameState.isGameOver) {\n        gameStore.nextTurn()\n      }\n      id = setTimeout(tick, gameState.turnDelay)\n    }\n    id = setTimeout(tick, gameState.turnDelay)\n    return () => {\n      clearTimeout(id)\n    }\n  }, [gameState.turnDelay, gameState.hasGameBegun, gameState.isGameOver])\n\n  useLayoutEffect(() => {\n    gameStore.subscribe(setgameState)\n    gameStore.init()\n\n    window.addEventListener('keyup', (e) => {\n      e.preventDefault()\n\n      switch (e.key) {\n        case ' ':\n          gameStore.togglePause()\n          break\n      }\n    })\n\n    window.addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'Enter':\n          gameStore.swapQueuePiece()\n          break\n        case 'ArrowDown':\n        case 's':\n          gameStore.updatePieceCoordinates({ x: 0, y: 1 })\n          break\n        case 'ArrowRight':\n        case 'd':\n          gameStore.updatePieceCoordinates({ x: 1, y: 0 })\n          break\n        case 'ArrowLeft':\n        case 'a':\n          gameStore.updatePieceCoordinates({ x: -1, y: 0 })\n          break\n        case 'ArrowUp':\n        case 'w':\n          gameStore.dropPiece()\n          break\n        case 'q':\n          gameStore.rotatePiece(1)\n          break\n        case 'e':\n          gameStore.rotatePiece(-1)\n          break\n      }\n    })\n\n    return () => {\n      gameStore.unsubcribe()\n    }\n  }, [setgameState])\n\n  const { cells,\n    isPaused,\n    hasGameBegun,\n    score,\n    isGameOver,\n    nextPieceType,\n    totalLinesCleared,\n    isColorblindModeEnabled,\n    isGhostEnabled,\n    queuePieceType,\n    isQueuePieceEnabled,\n    canQueuePiece,\n    isAudioMuted,\n  } = gameState\n  const {\n    toggleColorblindMode: onColorblindChange,\n    toggleGhost: onGhostChange,\n    toggleQueuePiece: onQueueChange,\n    toggleAudio: onAudioChange,\n    startGame,\n  } = gameStore\n\n  const overlayProps: IOverlayProps = {\n    score,\n    isAudioMuted,\n    isGameOver,\n    isPaused,\n    hasGameBegun,\n    startGame,\n  }\n  const boardProps: IBoardProps = {\n    cells,\n    isColorblindModeEnabled,\n    isGhostEnabled\n  }\n  const dashBoardProps: IDashboardProps = {\n    isColorblindModeEnabled,\n    isGhostEnabled,\n    onColorblindChange,\n    onGhostChange,\n    isQueuePieceEnabled,\n    onQueueChange,\n    isAudioMuted,\n    onAudioChange,\n  }\n  const queuePieceProps: IDisplayPieceProps = {\n    pieceType: queuePieceType,\n    isEnabled: hasGameBegun && isQueuePieceEnabled,\n    isActive: canQueuePiece,\n    isColorblindModeEnabled,\n    title: \"Queue Piece\"\n  }\n  const nextPieceProps: IDisplayPieceProps = {\n    pieceType: nextPieceType,\n    isEnabled: hasGameBegun,\n    isActive: true,\n    isColorblindModeEnabled,\n    title: \"Next Piece\"\n  }\n\n  const themeSongProps: IThemeSongProps = { isAudioMuted, isPaused, hasGameBegun }\n\n  return (\n    <div className=\"App\">\n      <ThemeSong {...themeSongProps} />\n      <div className=\"left-panel\">\n        <div className=\"flex flex-stretch\">\n          <div className=\"panel legend-container\">\n            <Legend score={score} level={Calculate.level(totalLinesCleared)} />\n          </div>\n          <div className=\"panel\">\n            <Dashboard\n              {...dashBoardProps}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"board-anchor\">\n        <Overlay {...overlayProps} />\n        <Board {...boardProps} />\n      </div>\n      <div className=\"right-panel\">\n        <div className=\"flex flex-stretch\">\n          <div className=\"panel callout display-piece-container\">\n            <DisplayPiece {...nextPieceProps} />\n            <DisplayPiece {...queuePieceProps} />\n          </div>\n          <div className=\"attributions panel\">\n            <h4>Tetris by Philip A Vargas</h4>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/philipavargas\">\n              <FontAwesomeIcon icon={faLinkedin} />\n              <span>philipavargas</span>\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/PhilVargas\">\n              <FontAwesomeIcon icon={faGithub} />\n              <span>@PhilVargas</span>\n            </a>\n            <div>\n              <FontAwesomeIcon icon={faEnvelope} />\n              <span>philipavargas@gmail.com</span>\n            </div>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://stackoverflow.com/users/3213605/philvarg?tab=profile\">\n              <FontAwesomeIcon icon={faStackOverflow} />\n              <span>@philvarg</span>\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/PhilVargas/tetris\">\n              <FontAwesomeIcon icon={faGithub} />\n              <span>View Source Code</span>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}