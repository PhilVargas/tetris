{"version":3,"sources":["components/Dashboard/Dashboard.module.scss","components/DisplayPiece/DisplayPiece.module.scss","components/Board/Board.module.scss","components/ThemeSong/ThemeSong.module.scss","components/Legend/Legend.module.scss","typings/index.ts","constants/Settings/BoardSettings/BoardSettings.ts","constants/Settings/BoardSettings/index.ts","constants/Settings/CellSettings/index.ts","constants/Settings/CellSettings/CellSettings.ts","constants/Settings/GameSettings/GameSettings.ts","constants/Settings/GameSettings/index.ts","utils/Calculator.ts","utils/GameUtil.ts","store/game.ts","components/Cell/index.ts","components/Cell/Cell.tsx","components/Board/index.ts","components/Board/Board.tsx","components/Overlay/index.ts","components/Overlay/Overlay.tsx","components/DisplayPiece/index.ts","components/DisplayPiece/DisplayPiece.tsx","components/Legend/index.ts","components/Legend/Legend.tsx","components/Switch/index.ts","components/Switch/Switch.tsx","components/Dashboard/index.ts","components/Dashboard/Dashboard.tsx","components/ThemeSong/index.ts","components/ThemeSong/ThemeSong.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Cell/Cell.module.scss","components/Overlay/Overlay.module.scss"],"names":["module","exports","CellType","BoardSettings","height","width","hiddenRows","yCoord","xCoord","rotation","pieceIds","CellSettings","edgeLength","Pieces","I","O","Z","S","T","J","L","PieceShapeMap","x","y","PossibleBaseScorePerTurn","GameSettings","hasGameBegun","isPaused","initialTurnDelay","totalLinesCleared","score","scoreThisTurn","minimumTurnDelay","isGameOver","isColorblindModeEnabled","isGhostEnabled","isQueuePieceEnabled","canQueuePiece","isAudioMuted","cellIndexFromCoords","coordinate","getCellIdsForPiece","currentPieceType","reduce","cellIds","pieceOffset","push","getCellRows","cells","Array","rows","_","rowStart","slice","isRowFrozen","row","every","cell","cellType","E","hasCollision","nextPieceCoordinate","shape","nextXCoordinate","nextYCoordinate","some","xOffset","yOffset","willEncounterXBoundary","willEncounterYBoundary","nextPieceCell","willEncounterFrozenPiece","hasCellCollision","dropCoordinate","currentCoordinate","nextYCoord","Calculate","didPlayerLose","pieceType","id","turnDelay","level","Math","max","min","floor","linesClearedThisTurn","scoreMultiplier","getCellIdsForGhost","isCollisionFree","currentRotation","rotationDirection","abs","isAnyRowFrozen","getFrozenRowIndices","map","cellRow","index","filter","rowIndex","generateDefaultCells","isFrozen","generateShiftedCells","atRowIndex","shiftedId","shiftedCells","shiftedCell","concat","generateRandomPieceType","randomIndex","random","length","GameUtil","freezeCells","includes","scoreRowsForTurn","boardCells","lowestFrozenRowIndex","pop","generateInitialState","nextPieceType","subject","Subject","state","updateCells","ghostPieceIds","boardCell","undefined","ghostType","gameStore","init","next","subscribe","setState","unsubcribe","unsubscribe","startGame","staticSettings","initialState","updatePieceCoordinates","offset","nextXCoord","nextCoord","nextTurn","frozenCells","randomPieceType","defaultXCoord","defaultYCoord","defaultRotation","togglePause","toggleColorblindMode","toggleGhost","toggleQueuePiece","toggleAudio","swapQueuePiece","queuePieceType","newPieceType","newNextPieceType","newQueuePieceType","dropPiece","finalYCoord","rotatePiece","nextRotation","Cell","className","isHidden","isGhost","isPiece","styleProps","computedClassName","cn","styles","wrapper","colorBlind","hiddenRow","ghost","piece","style","Board","key","maxHeight","cellId","generateCells","Overlay","buttonText","audioText","Enabled","Disabled","container","overlayText","onClick","e","preventDefault","icon","faPause","size","DisplayPiece","isEnabled","title","isActive","colorName","pieceCell","colorStyles","displayWrapper","disabled","Legend","scoreRow","scoreItem","transitionLeave","transitionName","transitionEnterTimeout","code","Switch","labelText","isChecked","onChange","type","checked","Dashboard","onColorblindChange","onGhostChange","onQueueChange","onAudioChange","header","ghostContainer","queueContainer","audioContainer","colorblindContainer","ThemeSong","audioEl","useRef","useEffect","current","pause","play","ref","src","loop","App","useState","gameState","setgameState","setTimeout","tick","clearTimeout","useLayoutEffect","window","addEventListener","overlayProps","boardProps","dashBoardProps","queuePieceProps","nextPieceProps","themeSongProps","legendProps","target","rel","href","faLinkedin","faGithub","faEnvelope","faStackOverflow","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,OAAS,0BAA0B,oBAAsB,uCAAuC,eAAiB,kCAAkC,eAAiB,kCAAkC,eAAiB,oC,mBCA9QD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,eAAiB,qCAAqC,SAAW,+BAA+B,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,gCAAgC,UAAY,kC,mBCA1dD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,sB,mBCA1DD,EAAOC,QAAU,CAAC,QAAU,6B,gGCA5BD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,KAAO,qBAAqB,SAAW,yBAAyB,cAAgB,gC,gECDxHC,E,gHAAAA,K,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,OAAAA,M,KCEZ,I,ECAeC,EDAuB,CACpCC,OAAQ,GACRC,MAAO,GACPC,WAAY,EACZC,OAAQ,EACRC,OAAQ,EACRC,SAAU,EACVC,SAAU,IEPGC,ECAqB,CAClCC,WAAY,I,OCDDC,EAAqB,CAChCX,EAASY,EACTZ,EAASa,EACTb,EAASc,EACTd,EAASe,EACTf,EAASgB,EACThB,EAASiB,EACTjB,EAASkB,GAGEC,GAAuB,mBACjCnB,EAASY,EAAI,CACZ,CACE,CAAEQ,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,MAxBmB,cA2BjCrB,EAASa,EAAI,CACZ,CACE,CAAEO,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,MAlDkB,cAqDjCrB,EAASc,EAAI,CACZ,CACE,CAAEM,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,EAAG,MA5EkB,cA+EjCrB,EAASe,EAAI,CACZ,CACE,CAAEK,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,EAAG,MAtGkB,cAyGjCrB,EAASgB,EAAI,CACZ,CACE,CAAEI,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,MAhImB,cAmIjCrB,EAASiB,EAAI,CACZ,CACE,CAAEG,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,EAAG,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,MA1JkB,cA6JjCrB,EAASkB,EAAI,CACZ,CACE,CAAEE,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAEb,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,GACZ,CAAED,GAAI,EAAGC,EAAG,IAEd,CACE,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,MApLkB,GAyLvBC,EAAoD,CAAC,EAAG,GAAI,IAAK,IAAK,MClMpEC,EDsMqB,CAClCC,cAAc,EACdC,UAAU,EACVC,iBAAkB,IAClBC,kBAAmB,EACnBC,MAAO,EACPC,cAAe,EACfC,iBAAkB,GAClBC,YAAY,EACZC,yBAAyB,EACzBC,gBAAgB,EAChBC,qBAAqB,EACrBC,eAAe,EACfC,cAAc,GEnNVC,EAAsB,SAACC,GAC3B,IAAQhC,EAAmBgC,EAAnBhC,OAAQD,EAAWiC,EAAXjC,OAChB,OAAOC,EAAUL,EAAcE,MAAQE,GAGnCkC,EAAqB,SAACD,EAAyB/B,EAAoBiC,GACvE,IAAQlC,EAAmBgC,EAAnBhC,OAAQD,EAAWiC,EAAXjC,OAEhB,OAD0Bc,EAAcqB,GAAkBjC,GAC7CkC,QAAO,SAACC,EAAwBC,GAC3C,IAEML,EAA0B,CAAEhC,OAFbA,EAASqC,EAAYvB,EAEcf,OADnCA,EAASsC,EAAYtB,GAG1C,OADAqB,EAAQE,KAAKP,EAAoBC,IAC1BI,IACN,KAGCG,EAAc,SAACC,GACnB,OAAO,YAAIC,MAAM9C,EAAcC,SAASuC,QAAO,SAACO,EAAyBC,EAAGC,GAE1E,OADAF,EAAKJ,KAAKE,EAAMK,MAAMD,EAAWjD,EAAcE,OAAQ+C,EAAW,GAAKjD,EAAcE,QAC9E6C,IACN,KAGCI,EAAc,SAACC,GACnB,OAAOA,EAAIC,OAAM,SAACC,GAChB,OAAOA,EAAKC,WAAaxD,EAASyD,MAwBhCC,EAAe,SAACC,EAAkCpD,EAAoBiC,EAA6BM,GACvG,IAAMc,EAAQzC,EAAcqB,GAAkBjC,GAC9BsD,EAA6CF,EAArDrD,OAAiCwD,EAAoBH,EAA5BtD,OACjC,OAAOuD,EAAMG,MAAK,SAACpB,GACjB,IAAWqB,EAAwBrB,EAA3BvB,EAAe6C,EAAYtB,EAAftB,EAEpB,OAhBqB,SAACsC,EAAkCb,GAC1D,IAAgBe,EAA6CF,EAArDrD,OAAiCwD,EAAoBH,EAA5BtD,OAC3B6D,EAAyBL,EAAkB,GAAKA,GAAmB5D,EAAcE,MACjFgE,EAAyBL,GAAmB7D,EAAcC,OAE1DkE,EAAgBtB,EAAMT,EAAoBsB,IAC1CU,EAA4C,MAAjBD,GAAyBA,EAAcZ,WAAaxD,EAASyD,EAC9F,OAAOS,GAA0BC,GAA0BE,EASlDC,CADiC,CAAEhE,OAAQuD,EAAkBG,EAAS3D,OAAQyD,EAAkBG,GAC3DnB,OAa1CyB,EAAiB,SAACzB,EAAmBvC,EAAoBiC,EAA6BgC,GAG1F,IAFA,IAAQlE,EAAmBkE,EAAnBlE,OACJmE,EADuBD,EAAXnE,QAERqD,EAAa,CAAEpD,SAAQD,OAAQoE,EAAa,GAAKlE,EAAUiC,EAAkBM,IACnF2B,IAEF,MAAO,CAAEnE,SAAQD,OAAQoE,IA4CZC,EAjBG,CAChBC,cAPoB,SAAC7B,GACrB,OAAOA,EAAMiB,MAAK,SAACR,GACjB,OAAyB,MAAlBA,EAAKqB,WAAqBrB,EAAKsB,GAAK5E,EAAcE,MAAQF,EAAcG,eAMjF0E,UAZgB,SAACC,GACjB,OAAOC,KAAKC,IAAI1D,EAAaO,iBAAkBP,EAAaG,iBAAoB,GAAKqD,IAYrFA,MArBY,SAACpD,GACb,OAAOqD,KAAKE,IAAI,GAAIF,KAAKG,MAAMxD,EAAoB,MAqBnDE,cAlBoB,SAACuD,EAAoCC,GACzD,OAAO/D,EAAyB8D,IAAyB,EAAIC,IAkB7DhD,sBACAkC,iBACAhC,qBACA+C,mBAhCyB,SAACxC,EAAmBvC,EAAoBiC,EAA6BgC,GAC9F,IAAQlE,EAAWkE,EAAXlE,OACAD,EAAWkE,EAAezB,EAAOvC,EAAUiC,EAAkBgC,GAA7DnE,OACR,OAAOkC,EAAmB,CAAEjC,SAAQD,UAAUE,EAAUiC,IA8BxDkB,eACA6B,gBApDsB,SAAC5B,EAAkCpD,EAAoBiC,EAA6BM,GAC1G,OAAQY,EAAaC,EAAqBpD,EAAUiC,EAAkBM,IAoDtEvC,SAhDe,SAACiF,EAA2BC,GAC3C,OAAOT,KAAKU,KAAK,EAAIF,EAAkBC,GAAqB,IAgD5D5C,cACA8C,eArFqB,SAAC7C,GACtB,OAAOD,EAAYC,GAAOiB,KAAKX,IAqF/BwC,oBAlF0B,SAAC9C,GAC3B,OAAOD,EAAYC,GAAO+C,KAAI,SAACC,EAAqBC,GAClD,OAAO3C,EAAY0C,GAAWC,GAAS,KACtCC,QAAO,SAACC,GAAD,OAAsBA,GAAY,OCnCxCC,EAAuB,WAAqD,IAApDlD,EAAmD,uDAA5C/C,EAAcC,OACjD,OAAO,YAAI6C,MAAMC,IAAOP,QAAO,SAACK,EAA0BG,EAAG5C,GAC3D,OAAO,YAAI0C,MAAM9C,EAAcE,QAAQsC,QAAO,SAACK,EAA0BG,EAAG3C,GAQ1E,OAPAwC,EAAMF,KAAK,CACTiC,GAAIH,EAAUrC,oBAAoB,CAAE/B,SAAQD,WAC5CA,SACAC,SACA6F,UAAU,EACV3C,SAAUxD,EAASyD,IAEdX,IACNA,KACF,KAGCsD,EAAuB,SAACC,EAAoBvD,GAChD,IAAMwD,GAAaD,EAAa,GAAKpG,EAAcE,MAC7CoG,EAAezD,EAAM+C,KAAI,SAACW,GAC9B,GAAIA,EAAY3B,GAAKyB,EAAW,CAC9B,IAAM/C,EAAOT,EAAM0D,EAAY3B,GAAK5E,EAAcE,OAClD,OAAO,2BAAKoD,GAAZ,IAAkBsB,GAAI2B,EAAY3B,KAElC,OAAO2B,KAERrD,MAAMlD,EAAcE,MAAOF,EAAcC,OAASD,EAAcE,OAEnE,OADmB+F,EAAqB,GACtBO,OAAOF,IAerBG,EAA0B,WAC9B,IAAMC,EAAc3B,KAAKG,MAAMH,KAAK4B,SAAWjG,EAAOkG,QACtD,OAAOlG,EAAOgG,IA2CDG,EA/BE,CACfZ,uBACAQ,0BACAN,uBACAW,YAbkB,SAACjE,EAAmBtC,EAAyBgC,GAC/D,OAAOM,EAAM+C,KAAI,SAACtC,GAIhB,OAHI/C,EAASwG,SAASzD,EAAKsB,MACzBtB,EAAKC,SAAWhB,GAEXe,MAST0D,iBA/BuB,SAACC,EAAwBvF,GAGhD,IAFA,IAAIyD,EAAqC,EACrCtC,EAAK,YAAOoE,GACTxC,EAAUiB,eAAe7C,IAAQ,CACtCsC,GAA8C,EAC9C,IAAM+B,EAAuBzC,EAAUkB,oBAAoB9C,GAAOsE,MAClE,GAA4B,MAAxBD,EAAgC,MACpCrE,EAAQsD,EAAqBe,EAAsBrE,GAGrD,MAAO,CAAEA,QAAOjB,cADM6C,EAAU7C,cAAcuD,EAAsBV,EAAUK,MAAMpD,IACrDyD,yBAsB/BiC,qBAAsB,WACpB,MAAO,CACLtF,WAAYR,EAAaQ,WACzBzB,OAAQL,EAAcK,OACtBD,OAAQJ,EAAcI,OACtBG,SAAUP,EAAcO,SACxBD,SAAUN,EAAcM,SACxBkB,SAAUF,EAAaE,SACvBD,aAAcD,EAAaC,aAC3BG,kBAAmBJ,EAAaI,kBAChCC,MAAOL,EAAaK,MACpBC,cAAeN,EAAaM,cAC5BiD,UAAWvD,EAAaG,iBACxBoB,MAAOoD,IACP1D,iBAAkBkE,IAClBY,cAAeZ,IACf1E,wBAAyBT,EAAaS,wBACtCC,eAAgBV,EAAaU,eAC7BC,oBAAqBX,EAAaW,oBAClCC,cAAeZ,EAAaY,cAC5BC,aAAcb,EAAaa,gBC9E3BmF,EAAU,IAAIC,IAEhBC,EAAQX,EAASO,uBAEfK,EAAc,SAAC5E,EAAmBN,EAA6BhC,EAAyBmH,GAC5F,OAAO7E,EAAM+C,KAAI,SAAC+B,GAYhB,OAXIpH,EAASwG,SAASY,EAAU/C,IAC9B+C,EAAUhD,UAAYpC,EAEtBoF,EAAUhD,eAAYiD,EAGpBF,EAAcX,SAASY,EAAU/C,IACnC+C,EAAUE,UAAYtF,EAEtBoF,EAAUE,eAAYD,EAEjBD,MA+LIG,EAlBG,CAChBV,qBAAsBP,EAASO,qBAC/BW,KAAM,kBAAMT,EAAQU,KAAKR,IACzBS,UAAW,SAACC,GAAD,OAAoDZ,EAAQW,UAAUC,IACjFC,WAAY,WAAQb,EAAQc,eAC5BC,UAlJgB,WAChB,MAAuFb,EACjFc,EAAsC,CAAEnG,aAD9C,EAAQA,aACoDH,eAD5D,EAAsBA,eACsDC,oBAD5E,EAAsCA,oBAC2DF,wBADjG,EAA2DA,yBAErDwG,EAAe1B,EAASO,uBACtB/G,EAA6BkI,EAA7BlI,OAAQD,EAAqBmI,EAArBnI,OAAQE,EAAaiI,EAAbjI,SAClBiC,EAAmBsE,EAASJ,0BAC5BlG,EAAWkE,EAAUnC,mBAAmB,CAAEjC,SAAQD,UAAUE,EAAUiC,GACtEmF,EAAgBjD,EAAUY,mBAAmBkD,EAAa1F,MAAOvC,EAAUiC,EAAkB,CAAElC,SAAQD,WACvGyC,EAAQ4E,EAAYc,EAAa1F,MAAON,EAAkBhC,EAAUmH,GAC1EF,EAAK,uCACAe,GACAD,GAFA,IAGHzF,QACAN,mBACAlC,OAAQA,EACRD,OAAQA,EACRmB,cAAc,EACdC,UAAU,IAIZ8F,EAAQU,KAAKR,IA8HbgB,uBAtK6B,SAACC,GAC9B,IAAW1E,EAAwB0E,EAA3BtH,EAAe6C,EAAYyE,EAAfrH,EACpB,EAA+EoG,EAAvEnH,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,OAAQmC,EAAxB,EAAwBA,iBAAkBjC,EAA1C,EAA0CA,SAAUkB,EAApD,EAAoDA,SACpD,GADA,EAA8DD,eACzCC,EAArB,CACA,IAAMkH,EAAa3E,EAAU1D,EACvBmE,EAAaR,EAAU5D,EAEvBuI,EAAyB,CAAEtI,OAAQqI,EAAYtI,OAAQoE,GAG7D,IAFqBC,EAAUhB,aAAakF,EAAWrI,EAAUiC,EAAkBiF,EAAM3E,OAEzF,CAEA,IAAMtC,EAAWkE,EAAUnC,mBAAmB,CAAEjC,OAAQqI,EAAYtI,OAAQoE,GAAclE,EAAUiC,GAC9FmF,EAAgBjD,EAAUY,mBAAmBmC,EAAM3E,MAAOvC,EAAUiC,EAAkBoG,GACtF9F,EAAQ4E,EAAYD,EAAM3E,MAAON,EAAkBhC,EAAUmH,GACnEF,EAAK,2BAAQA,GAAR,IAAenH,OAAQqI,EAAYtI,OAAQoE,EAAY3B,UAC5DyE,EAAQU,KAAKR,MAuJboB,SAtHe,WACf,MAA8FpB,EAAtFnH,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,OAAQmC,EAAxB,EAAwBA,iBAAkBjC,EAA1C,EAA0CA,SAAUkB,EAApD,EAAoDA,SAAUD,EAA9D,EAA8DA,aAAc8F,EAA5E,EAA4EA,cAC5E,GAAK9F,IAAgBC,EAArB,CACA,IAAMgD,EAAapE,EAAS,EAE5B,GAAIqE,EAAUa,gBAAgB,CAAEjF,SAAQD,OAAQoE,GAAclE,EAAUiC,EAAkBiF,EAAM3E,OAAQ,CACtG,IAAMtC,EAAWkE,EAAUnC,mBAAmB,CAAEjC,SAAQD,OAAQoE,GAAclE,EAAUiC,GAClFmF,EAAgBjD,EAAUY,mBAAmBmC,EAAM3E,MAAOvC,EAAUiC,EAAkB,CAAElC,SAAQD,OAAQoE,IACxG3B,EAAQ4E,EAAYD,EAAM3E,MAAON,EAAkBhC,EAAUmH,GACnEF,EAAK,2BAAQA,GAAR,IAAenH,OAAQA,EAAQD,OAAQoE,EAAY3B,QAAOjB,cAAe,IAC9E0F,EAAQU,KAAKR,OACR,CACL,IAAMqB,EAtEU,SAAChG,GACnB,OAAOA,EAAM+C,KAAI,SAAC+B,GAIhB,OAH2B,MAAvBA,EAAUhD,YACZgD,EAAUpE,SAAWoE,EAAUhD,WAE1BgD,KAiEab,CAAYU,EAAM3E,OACtC,GAAI4B,EAAUC,cAAcmE,GAC1BrB,EAAK,2BAAQA,GAAR,IAAe1F,YAAY,EAAMe,MAAOgG,EAAajH,cAAe,IACzE0F,EAAQU,KAAKR,OACR,CACL,MAAmEX,EAASG,iBAAiB6B,EAAarB,EAAM9F,mBAAjGuF,EAAf,EAAQpE,MAAmBjB,EAA3B,EAA2BA,cAAeuD,EAA1C,EAA0CA,qBACpC2D,EAAkBjC,EAASJ,0BACjBsC,EAAoE/I,EAA5EK,OAA+B2I,EAA6ChJ,EAArDI,OAAiC6I,EAAoBjJ,EAA9BM,SAChDC,EAAWkE,EAAUnC,mBAAmB,CAAEjC,OAAQ0I,EAAe3I,OAAQ4I,GAAiBC,EAAiB5B,GAC3GK,EAAgBjD,EAAUY,mBAAmB4B,EAAYgC,EAAiB5B,EAAe,CAAEhH,OAAQ0I,EAAe3I,OAAQ4I,IAC1HnG,EAAQ4E,EAAYR,EAAYI,EAAe9G,EAAUmH,GACzDhG,EAAoB8F,EAAM9F,kBAAoByD,EACpDqC,EAAK,2BACAA,GADA,IAEHnH,OAAQ0I,EACR3I,OAAQ4I,EACRzG,iBAAkB8E,EAClBA,cAAeyB,EACfjG,QACAvC,SAAU2I,EACVvH,kBAAmBA,EACnBmD,UAAWJ,EAAUI,UAAUJ,EAAUK,MAAMpD,IAC/CQ,eAAe,EACfP,MAAO6F,EAAM7F,MAAQC,EACrBA,kBAEF0F,EAAQU,KAAKR,OAiFjB0B,YA7HkB,WACb1B,EAAMjG,eACXiG,EAAK,2BAAQA,GAAR,IAAehG,UAAWgG,EAAMhG,WACrC8F,EAAQU,KAAKR,KA2Hb2B,qBA7E2B,WAC3B3B,EAAK,2BAAQA,GAAR,IAAezF,yBAA0ByF,EAAMzF,0BACpDuF,EAAQU,KAAKR,IA4Eb4B,YAzEkB,WAClB5B,EAAK,2BAAQA,GAAR,IAAexF,gBAAiBwF,EAAMxF,iBAC3CsF,EAAQU,KAAKR,IAwEb6B,iBArEuB,WACvB7B,EAAK,2BAAQA,GAAR,IAAevF,qBAAsBuF,EAAMvF,sBAChDqF,EAAQU,KAAKR,IAoEb8B,YAjEkB,WAClB9B,EAAK,2BAAQA,GAAR,IAAerF,cAAeqF,EAAMrF,eACzCmF,EAAQU,KAAKR,IAgEb+B,eA7DqB,WACrB,MAAgG/B,EAAxFvF,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,cAAeK,EAA5C,EAA4CA,iBAAkB8E,EAA9D,EAA8DA,cAAemC,EAA7E,EAA6EA,eAC7E,GAAIvH,GAAuBC,EAAe,CACxC,IAAIuH,EACAC,EACEC,EAAoBpH,EACJ,MAAlBiH,GACFC,EAAeD,EACfE,EAAmBrC,IAEnBoC,EAAepC,EACfqC,EAAmB7C,EAASJ,2BAE9B,IAAQpG,EAA6BL,EAA7BK,OAAQD,EAAqBJ,EAArBI,OAAQE,EAAaN,EAAbM,SAClBC,EAAWkE,EAAUnC,mBAAmB,CAAEjC,SAAQD,UAAUE,EAAUmJ,GACtE/B,EAAgBjD,EAAUY,mBAAmBmC,EAAM3E,MAAOvC,EAAUmJ,EAAc,CAAEpJ,SAAQD,WAC5FyC,EAAQ4E,EAAYD,EAAM3E,MAAO4G,EAAclJ,EAAUmH,GAC/DF,EAAK,2BAAQA,GAAR,IAAejF,iBAAkBkH,EAAcpC,cAAeqC,EAAkBF,eAAgBG,EAAmBzH,eAAe,EAAO7B,SAAQD,SAAQE,WAAUuC,UACxKyE,EAAQU,KAAKR,KA4CfoC,UAxCgB,WAChB,MAA+EpC,EAAvEnH,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,OAAQmC,EAAxB,EAAwBA,iBAAkBjC,EAA1C,EAA0CA,SAAUkB,EAApD,EAAoDA,SACpD,GADA,EAA8DD,eACzCC,EAArB,CACA,IAAgBqI,EAAgBpF,EAAUH,eAAekD,EAAM3E,MAAOvC,EAAUiC,EAAkB,CAAElC,SAAQD,WAApGA,OACFG,EAAWkE,EAAUnC,mBAAmB,CAAEjC,SAAQD,OAAQyJ,GAAevJ,EAAUiC,GACnFM,EAAQ4E,EAAYD,EAAM3E,MAAON,EAAkBhC,EAAUA,GACnEiH,EAAK,2BAAQA,GAAR,IAAepH,OAAQyJ,EAAahH,UACzCyE,EAAQU,KAAKR,KAkCbsC,YA/BkB,SAACtE,GACnB,MAA+EgC,EAAvEnH,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,OAAQmC,EAAxB,EAAwBA,iBAAkBjC,EAA1C,EAA0CA,SAAUkB,EAApD,EAAoDA,SACpD,GADA,EAA8DD,eACzCC,EAArB,CACA,IAAMuI,EAAetF,EAAUnE,SAASA,EAAUkF,GAC5CmD,EAAY,CAAEtI,SAAQD,UAG5B,IAFqBqE,EAAUhB,aAAakF,EAAWoB,EAAcxH,EAAkBiF,EAAM3E,OAE7F,CAEA,IAAMtC,EAAWkE,EAAUnC,mBAAmB,CAAEjC,SAAQD,UAAU2J,EAAcxH,GAC1EmF,EAAgBjD,EAAUY,mBAAmBmC,EAAM3E,MAAOkH,EAAcxH,EAAkB,CAAElC,SAAQD,WACpGyC,EAAQ4E,EAAYD,EAAM3E,MAAON,EAAkBhC,EAAUmH,GACnEF,EAAK,2BAAQA,GAAR,IAAelH,SAAUyJ,EAAclH,UAC5CyE,EAAQU,KAAKR,O,8JCjMAwC,ECIc,SAAC,GAAiH,IAAD,EAA9GC,EAA8G,EAA9GA,UAAWC,EAAmG,EAAnGA,SAAUC,EAAyF,EAAzFA,QAASC,EAAgF,EAAhFA,QAAS7G,EAAuE,EAAvEA,SAAUxB,EAA6D,EAA7DA,wBAAyBC,EAAoC,EAApCA,eAAmBqI,EAAiB,iBACtIC,EAAoBC,IAAGN,EAAWO,IAAOC,QAASD,IAAO,WAAD,OAAYjH,KAA9C,mBACzBiH,IAAOE,WAAa3I,GADK,cAEzByI,IAAOG,UAAYT,GAFM,cAGzBM,IAAOI,MAAQT,GAAWnI,GAHD,cAIzBwI,IAAOK,MAAQT,GAJU,IAM5B,OACE,yBAAKU,MAAK,eAAOT,GAAcJ,UAAWK,KCZ/BS,ECQgB,SAAC,GAAwD,IAAtDlI,EAAqD,EAArDA,MAAOd,EAA8C,EAA9CA,wBAAyBC,EAAqB,EAArBA,eAiChE,OACE,yBAAKiI,UAAWM,IAAGC,IAAOC,UAVnB,YAAI3H,MAAM9C,EAAcC,SAAS2F,KAAI,SAAC5C,EAAG5C,GAC9C,OACE,yBAAK4K,IAAK5K,EAAQ6J,UAAWM,IAAGC,IAAOzH,KAAM,IAAK+H,MAAO,CAAEG,UAAWzK,EAAaC,aAzBnE,SAACL,GACrB,OAAO,YAAI0C,MAAM9C,EAAcE,QAAQ0F,KAAI,SAAC5C,EAAG3C,GAC7C,IAAM6K,EAASzG,EAAUrC,oBAAoB,CAAE/B,SAAQD,WACjDkD,EAAOT,EAAMqI,GACb3H,EAAqBD,EAAKqB,WAAc3C,GAAkBsB,EAAKuE,WAAcvE,EAAKC,SAClF2G,EAAW9J,EAASJ,EAAcG,WAClCgK,EAA4B,MAAlB7G,EAAKuE,WAAuC,MAAlBvE,EAAKqB,UACzCyF,EAA4B,MAAlB9G,EAAKqB,UAErB,OAAO,kBAAC,EAAD,CAAMqG,IAAK1H,EAAKsB,GACrBsF,SAAUA,EACVC,QAASA,EACTC,QAASA,EACT7G,SAAUA,EACVrD,MAAOM,EAAaC,WACpBR,OAAQO,EAAaC,WACrBsB,wBAAyBA,EACzBC,eAAgBA,OASbmJ,CAAc/K,S,gBCnCVgL,ECOoB,SAAC,GAA4E,IAA1E5J,EAAyE,EAAzEA,SAAUD,EAA+D,EAA/DA,aAAc8G,EAAiD,EAAjDA,UAAW1G,EAAsC,EAAtCA,MAAOG,EAA+B,EAA/BA,WAAYK,EAAmB,EAAnBA,aAC1F,GAAIZ,IAAiBC,IAAaM,EAAc,OAAO,KAEvD,IAAMuJ,EAAad,IAAG,CACpB,OAAUhJ,EACV,QAAWA,GAAgBO,IASvBwJ,EAAYf,IAAG,WAAY,CAC/BgB,SAAUpJ,EACVqJ,SAAUrJ,IAGZ,OACE,yBAAK8H,UAAWO,IAAOC,SACrB,yBAAKR,UAAWO,IAAOiB,WACpB3J,GACC,CACE,uBAAGmI,UAAWO,IAAOkB,aAArB,cACA,uBAAGzB,UAAWO,IAAOkB,aAArB,iBAA6C/J,OAG9CJ,GAAgBO,IACjB,4BAAQmI,UAAU,MAAM0B,QArBhB,SAACC,GACfA,EAAEC,iBACFxD,MAmBiDgD,IAE3C9J,GACA,uBAAG0I,UAAWO,IAAOkB,aAArB,IAAoCJ,EAApC,KAED/J,IAAiBO,GAChB,yBAAKmI,UAAWO,IAAOkB,aACrB,kBAAC,IAAD,CAAiBI,KAAMC,IAASC,KAAK,W,iBC3ClCC,ECM8B,SAAC,GAAwE,IAAtEtH,EAAqE,EAArEA,UAAWuH,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAUrK,EAA8B,EAA9BA,wBAC/EsK,EAAS,kBAAc1H,GACvBsF,EAAYM,IAAGC,IAAO8B,UAAW9B,IAAO6B,GAAYE,IAAYF,GAAlD,eACjBE,IAAY7B,WAAa3I,IAE5B,OACE,yBAAKkI,UAAWM,IAAGC,IAAOC,UACxB,6BAAM0B,GACN,yBAAKlC,UAAWM,IAAGC,IAAOgC,eAAR,eAA2BhC,IAAOiC,UAAYP,GAA0B,MAAbvH,IAAsByH,KAChGF,GAA0B,MAAbvH,GACZ,CACE,yBAAKqG,IAAK,EAAGf,UAAWA,IACxB,yBAAKe,IAAK,EAAGf,UAAWA,IACxB,yBAAKe,IAAK,EAAGf,UAAWA,IACxB,yBAAKe,IAAK,EAAGf,UAAWA,Q,uCCpBrByC,I,MCOkB,SAAC,GAAqC,IAAnC5H,EAAkC,EAAlCA,MAAOnD,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAChD,OACE,yBAAKqI,UAAWM,IAAGC,KAAOC,UACxB,yBAAKR,UAAWM,IAAGC,KAAOmC,WACxB,0BAAM1C,UAAWM,IAAGC,KAAOoC,YAA3B,UAA+CjL,GAC/C,kBAAC,KAAD,CAAyBkL,iBAAiB,EAAOC,eAAe,oBAAoBC,uBAAwB,KAC1G,0BAAM/B,IAAKrJ,EAAOsI,UAAWM,IAAG,oBAAqBC,KAAO5I,gBAA5D,IAA8EA,KAGlF,uCAAakD,GACb,0CAAe,yBAAKmF,UAAWM,IAAGC,KAAOwC,OAA1B,QACf,0CAAe,yBAAK/C,UAAWM,IAAGC,KAAOwC,OAA1B,QACf,4CAAiB,yBAAK/C,UAAWM,IAAGC,KAAOwC,OAA1B,KAAjB,MAA4D,yBAAK/C,UAAWM,IAAGC,KAAOwC,OAA1B,MAC5D,6BAAK,yBAAK/C,UAAWM,IAAGC,KAAOwC,OAA1B,SAAL,aACA,6BAAK,yBAAK/C,UAAWM,IAAGC,KAAOwC,OAA1B,SAAL,wB,oBCrBSC,GCIkB,SAAC,GAAmD,IAAjDhD,EAAgD,EAAhDA,UAAWiD,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SACnE,OACE,2BAAOnD,UAAWA,GAChB,8BAAOiD,GACP,2BAAOG,KAAK,WAAWC,QAASH,EAAWC,SAAUA,MCR5CG,GCMwB,SAAC,GAAqJ,IAAnJxL,EAAkJ,EAAlJA,wBAAyByL,EAAyH,EAAzHA,mBAAoBxL,EAAqG,EAArGA,eAAgByL,EAAqF,EAArFA,cAAexL,EAAsE,EAAtEA,oBAAqByL,EAAiD,EAAjDA,cAAevL,EAAkC,EAAlCA,aAAcwL,EAAoB,EAApBA,cACtK,OACE,yBAAK1D,UAAWM,IAAGC,KAAOC,UACxB,yBAAKR,UAAWM,IAAGC,KAAOoD,SAA1B,YACA,kBAAC,GAAD,CACE3D,UAAWM,IAAGC,KAAOqD,gBACrBX,UAAW,QACXC,UAAWnL,EACXoL,SAAUK,IAEZ,kBAAC,GAAD,CACExD,UAAWM,IAAGC,KAAOsD,gBACrBZ,UAAW,QACXC,UAAWlL,EACXmL,SAAUM,IAEZ,kBAAC,GAAD,CACEzD,UAAWM,IAAGC,KAAOuD,gBACrBb,UAAW,QACXC,WAAYhL,EACZiL,SAAUO,IAEZ,kBAAC,GAAD,CACE1D,UAAWM,IAAGC,KAAOwD,qBACrBd,UAAW,kBACXC,UAAWpL,EACXqL,SAAUI,M,oBChCHS,GCMwB,SAAC,GAA8C,IAA5C9L,EAA2C,EAA3CA,aAAcX,EAA6B,EAA7BA,SAAUD,EAAmB,EAAnBA,aAC1D2M,EAAUC,iBAAyB,MAWzC,OATAC,qBAAU,WACe,MAAnBF,EAAQG,UACRlM,GAAgBX,IAAaD,EAC/B2M,EAAQG,QAAQC,QAEhBJ,EAAQG,QAAQE,WAKlB,yBAAKtE,UAAWM,IAAGC,KAAOC,UACxB,2BAAO+D,IAAKN,EAASO,IpBiLC,+GoBjLkBC,MAAI,MCwLnCC,GA9LC,WACd,MAAkCC,mBAAS9G,EAAUV,wBAArD,mBAAOyH,EAAP,KAAkBC,EAAlB,KAEAV,qBAAU,WACR,IAAIxJ,EASJ,OADAA,EAAKmK,YANL,SAASC,IACPpK,EAAKmK,WAAWC,EAAMH,EAAUhK,WAC5BgK,EAAUtN,eAAiBsN,EAAU/M,YACvCgG,EAAUc,aAGQiG,EAAUhK,WACzB,WACLoK,aAAarK,MAEd,CAACiK,EAAUhK,UAAWgK,EAAUtN,aAAcsN,EAAU/M,aAE3DoN,2BAAgB,WA4Cd,OA3CApH,EAAUG,UAAU6G,GACpBhH,EAAUC,OAEVoH,OAAOC,iBAAiB,SAAS,SAACxD,GAGhC,OAFAA,EAAEC,iBAEMD,EAAEZ,KACR,IAAK,IACHlD,EAAUoB,cACV,MACF,IAAK,QACHpB,EAAUyB,iBACV,MACF,IAAK,UACL,IAAK,IACHzB,EAAU8B,gBAKhBuF,OAAOC,iBAAiB,WAAW,SAACxD,GAClC,OAAQA,EAAEZ,KACR,IAAK,YACL,IAAK,IACHlD,EAAUU,uBAAuB,CAAErH,EAAG,EAAGC,EAAG,IAC5C,MACF,IAAK,aACL,IAAK,IACH0G,EAAUU,uBAAuB,CAAErH,EAAG,EAAGC,EAAG,IAC5C,MACF,IAAK,YACL,IAAK,IACH0G,EAAUU,uBAAuB,CAAErH,GAAI,EAAGC,EAAG,IAC7C,MACF,IAAK,IACH0G,EAAUgC,aAAa,GACvB,MACF,IAAK,IACHhC,EAAUgC,YAAY,OAKrB,WACLhC,EAAUK,gBAEX,CAAC2G,IAEJ,IACEjM,EAcEgM,EAdFhM,MACArB,EAaEqN,EAbFrN,SACAD,EAYEsN,EAZFtN,aACAI,EAWEkN,EAXFlN,MACAC,EAUEiN,EAVFjN,cACAE,EASE+M,EATF/M,WACAuF,EAQEwH,EARFxH,cACA3F,EAOEmN,EAPFnN,kBACAK,EAME8M,EANF9M,wBACAC,EAKE6M,EALF7M,eACAwH,EAIEqF,EAJFrF,eACAvH,EAGE4M,EAHF5M,oBACAC,EAEE2M,EAFF3M,cACAC,EACE0M,EADF1M,aAIsBqL,EAKpB1F,EALFqB,qBACasE,EAIX3F,EAJFsB,YACkBsE,EAGhB5F,EAHFuB,iBACasE,EAEX7F,EAFFwB,YAII+F,EAA8B,CAClC1N,QACAQ,eACAL,aACAN,WACAD,eACA8G,UAREP,EADFO,WAYIiH,EAA0B,CAC9BzM,QACAd,0BACAC,kBAGIuN,EAAkC,CACtCxN,0BACAC,iBACAwL,qBACAC,gBACAxL,sBACAyL,gBACAvL,eACAwL,iBAGI6B,EAAsC,CAC1C7K,UAAW6E,EACX0C,UAAW3K,GAAgBU,EAC3BmK,SAAUlK,EACVH,0BACAoK,MAAO,eAGHsD,EAAqC,CACzC9K,UAAW0C,EACX6E,UAAW3K,EACX6K,UAAU,EACVrK,0BACAoK,MAAO,cAGHuD,EAAkC,CAAEvN,eAAcX,WAAUD,gBAE5DoO,EAA4B,CAAEhO,QAAOC,gBAAekD,MAAOL,EAAUK,MAAMpD,IAEjF,OACE,yBAAKuI,UAAU,OACb,kBAAC,GAAcyF,GACf,yBAAKzF,UAAU,cACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0BACb,kBAAC,GAAW0F,IAEd,yBAAK1F,UAAU,SACb,kBAAC,GAAcsF,MAIrB,yBAAKtF,UAAU,gBACb,kBAAC,EAAYoF,GACb,kBAAC,EAAUC,IAEb,yBAAKrF,UAAU,eACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yCACb,kBAAC,EAAiBwF,GAClB,kBAAC,EAAiBD,IAEpB,yBAAKvF,UAAU,sBACb,yDACA,uBAAG2F,OAAO,SAASC,IAAI,sBAAsBC,KAAK,6CAChD,kBAAC,IAAD,CAAiBhE,KAAMiE,MACvB,gDAEF,uBAAGH,OAAO,SAASC,IAAI,sBAAsBC,KAAK,iCAChD,kBAAC,IAAD,CAAiBhE,KAAMkE,MACvB,8CAEF,6BACE,kBAAC,IAAD,CAAiBlE,KAAMmE,MACvB,0DAEF,uBAAGL,OAAO,SAASC,IAAI,sBAAsBC,KAAK,+DAChD,kBAAC,IAAD,CAAiBhE,KAAMoE,MACvB,4CAEF,uBAAGN,OAAO,SAASC,IAAI,sBAAsBC,KAAK,wCAChD,kBAAC,IAAD,CAAiBhE,KAAMkE,MACvB,wDCzLMG,QACW,cAA7BhB,OAAOiB,SAASC,UAEa,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBE5InBnR,EAAOC,QAAU,CAAC,QAAU,sBAAsB,UAAY,wBAAwB,MAAQ,oBAAoB,MAAQ,oBAAoB,UAAY,wBAAwB,UAAY,wBAAwB,WAAa,yBAAyB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,wBAAwB,UAAY,0B,kBCA5bD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,KAAO,sBAAsB,YAAc,gC","file":"static/js/main.d9a3e393.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dashboard_wrapper__3t_De\",\"header\":\"Dashboard_header__rptyF\",\"colorblindContainer\":\"Dashboard_colorblindContainer__orVmO\",\"ghostContainer\":\"Dashboard_ghostContainer__3q9Wz\",\"queueContainer\":\"Dashboard_queueContainer__1m0cx\",\"audioContainer\":\"Dashboard_audioContainer__2yOL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DisplayPiece_wrapper__16a2b\",\"displayWrapper\":\"DisplayPiece_displayWrapper__2a_HS\",\"disabled\":\"DisplayPiece_disabled__Z2RFP\",\"pieceCell\":\"DisplayPiece_pieceCell__3NiBb\",\"cellTypeI\":\"DisplayPiece_cellTypeI__17qqk\",\"cellTypeO\":\"DisplayPiece_cellTypeO__3qofc\",\"cellTypeS\":\"DisplayPiece_cellTypeS__143xO\",\"cellTypeT\":\"DisplayPiece_cellTypeT__I6KS5\",\"cellTypeZ\":\"DisplayPiece_cellTypeZ__dk7QT\",\"cellTypeJ\":\"DisplayPiece_cellTypeJ__2lXyF\",\"cellTypeL\":\"DisplayPiece_cellTypeL__2XACp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__tPbyu\",\"rows\":\"Board_rows__1ZdPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ThemeSong_wrapper__3J5XB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Legend_wrapper__3DfXQ\",\"code\":\"Legend_code__1_9vG\",\"scoreRow\":\"Legend_scoreRow__1Gzx5\",\"scoreThisTurn\":\"Legend_scoreThisTurn__1fQ44\"};","export enum CellType {\n  E = \"E\",\n  I = \"I\",\n  O = \"O\",\n  Z = \"Z\",\n  S = \"S\",\n  T = \"T\",\n  J = \"J\",\n  L = \"L\"\n}\n\nexport type PieceType = CellType.I | CellType.O | CellType.Z | CellType.S | CellType.T | CellType.J | CellType.L\nexport type PieceTypes = ReadonlyArray<PieceType>\n\nexport interface IPieceOffset {\n  readonly x: -1 | 0 | 1 | 2\n  readonly y: -1 | 0 | 1 | 2\n}\n\nexport type Rotation = 0 | 1 | 2 | 3\nexport type RotationDirection = -1 | 1\n\nexport interface ICoordinate {\n  readonly xCoord: number\n  readonly yCoord: number\n}\n\nexport type PieceShape = ReadonlyArray<IPieceOffset>\nexport type PieceRotations = ReadonlyArray<PieceShape>\nexport type PieceMap = {\n  [key in PieceType]: PieceRotations\n}\n\nexport type LinesCleared = 0 | 1 | 2 | 3 | 4\nexport type BaseScorePerTurn = 0 | 40 | 100 | 300 | 1200\nexport type Level = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10\nexport interface IScoredBoardCells {\n  cells: BoardCells\n  scoreThisTurn: number\n  linesClearedThisTurn: LinesCleared\n}\n\nexport interface IBoardSettings {\n  height: number\n  width: number\n  hiddenRows: number\n  yCoord: number\n  xCoord: number\n  pieceIds: Array<number>\n  rotation: Rotation\n}\n\nexport interface ICellSettings {\n  edgeLength: number\n}\nexport interface ICellProps {\n  className?: string\n  isHidden: boolean\n  isGhost: boolean\n  isPiece: boolean\n  width: number\n  height: number\n  cellType: CellType\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n}\n\nexport interface IGameSettings {\n  hasGameBegun: boolean\n  isPaused: boolean\n  initialTurnDelay: number\n  totalLinesCleared: number\n  score: number\n  scoreThisTurn: number\n  minimumTurnDelay: number\n  isGameOver: boolean\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  canQueuePiece: boolean\n  isAudioMuted: boolean\n}\n\nexport interface ISettings {\n  BoardSettings: IBoardSettings\n  CellSettings: ICellSettings\n  GameSettings: IGameSettings\n}\n\nexport interface IBoardCell {\n  id: number\n  yCoord: number\n  xCoord: number\n  isFrozen: boolean\n  cellType: CellType\n  pieceType?: PieceType\n  ghostType?: PieceType\n}\n\nexport type BoardCells = Array<IBoardCell>\n\nexport interface IBoardProps {\n  cells: BoardCells\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n}\n\nexport interface IGameState {\n  xCoord: number\n  yCoord: number\n  cells: BoardCells\n  currentPieceType: PieceType\n  nextPieceType: PieceType\n  queuePieceType?: PieceType\n  pieceIds: Array<number>\n  rotation: Rotation\n  turnDelay: number\n  isPaused: boolean\n  hasGameBegun: boolean\n  totalLinesCleared: number\n  score: number\n  scoreThisTurn: number\n  isGameOver: boolean\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  canQueuePiece: boolean\n  isAudioMuted: boolean\n}\n\nexport interface IOverlayProps {\n  isGameOver: boolean\n  isPaused: boolean\n  hasGameBegun: boolean\n  score: number\n  isAudioMuted: boolean\n  startGame: () => void\n}\n\nexport interface ILegendProps {\n  score: number\n  scoreThisTurn: number\n  level: Level\n}\nexport interface IDisplayPieceProps {\n  pieceType?: PieceType\n  isEnabled: boolean\n  isActive: boolean\n  title: string\n  isColorblindModeEnabled: boolean\n}\n\nexport interface IPersistentSettings {\n  isColorblindModeEnabled: boolean\n  isGhostEnabled: boolean\n  isQueuePieceEnabled: boolean\n  isAudioMuted: boolean\n}\n\nexport interface IDashboardProps extends IPersistentSettings {\n  onColorblindChange: () => void\n  onGhostChange: () => void\n  onQueueChange: () => void\n  onAudioChange: () => void\n}\n\nexport interface ISwitchProps {\n  className?: string\n  labelText?: string\n  isChecked: boolean\n  onChange: () => void\n}\n\nexport interface IThemeSongProps {\n  isAudioMuted: boolean\n  isPaused: boolean\n  hasGameBegun: boolean\n}\n","import { IBoardSettings } from '../../../typings'\n\nconst BoardSettings: IBoardSettings = {\n  height: 21,\n  width: 10,\n  hiddenRows: 1,\n  yCoord: 0,\n  xCoord: 4,\n  rotation: 0,\n  pieceIds: [],\n}\n\nexport default BoardSettings\n","import BoardSettings from './BoardSettings'\n\nexport default BoardSettings\n","import CellSettings from './CellSettings'\n\nexport default CellSettings\n","import { ICellSettings } from '../../../typings'\n\nconst CellSettings: ICellSettings = {\n  edgeLength: 25,\n}\n\nexport default CellSettings\n","import { IGameSettings, CellType, PieceTypes, PieceMap, BaseScorePerTurn } from '../../../typings'\n\nexport const Pieces: PieceTypes = [\n  CellType.I,\n  CellType.O,\n  CellType.Z,\n  CellType.S,\n  CellType.T,\n  CellType.J,\n  CellType.L,\n]\n\nexport const PieceShapeMap: PieceMap = {\n  [CellType.I]: [\n    [\n      { x: -1, y: 0 },\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 2, y: 0 }\n    ],\n    [\n      { x: 1, y: -1 },\n      { x: 1, y: 0 },\n      { x: 1, y: 1 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: -1, y: 1 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: 2, y: 1 }\n    ],\n    [\n      { x: 0, y: -1 },\n      { x: 0, y: 0 },\n      { x: 0, y: 1 },\n      { x: 0, y: 2 }\n    ],\n  ],\n  [CellType.O]: [\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ],\n    [\n      { x: 0, y: 0 },\n      { x: -1, y: 0 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 }\n    ]\n  ],\n  [CellType.Z]: [\n    [\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: 0, y: 0 },\n      { x: -1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: 1, y: 1 },\n      { x: 1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 0, y: 2 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 0 },\n      { x: -1, y: 1 },\n      { x: -1, y: 2 }\n    ],\n  ],\n  [CellType.S]: [\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 0, y: 0 },\n      { x: 1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 0 },\n      { x: 1, y: 1 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: 0, y: 2 },\n      { x: -1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 }\n    ],\n  ],\n  [CellType.T]: [\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 0, y: 0 },\n      { x: 1, y: 1 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 0 },\n      { x: 1, y: 1 },\n      { x: 0, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 1, y: 1 },\n      { x: 0, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 0, y: 0 },\n      { x: 0, y: 2 }\n    ],\n  ],\n  [CellType.J]: [\n    [\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: 0, y: 0 },\n      { x: 1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: -1, y: 1 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: 0, y: 0 },\n      { x: -1, y: 2 }\n    ],\n  ],\n  [CellType.L]: [\n    [\n      { x: 0, y: 1 },\n      { x: -1, y: 1 },\n      { x: 1, y: 1 },\n      { x: 1, y: 0 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 0 },\n      { x: 0, y: 2 },\n      { x: 1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n      { x: -1, y: 1 },\n      { x: -1, y: 2 }\n    ],\n    [\n      { x: 0, y: 1 },\n      { x: 0, y: 2 },\n      { x: 0, y: 0 },\n      { x: -1, y: 0 }\n    ],\n  ],\n}\n\nexport const PossibleBaseScorePerTurn: Array<BaseScorePerTurn> = [0, 40, 100, 300, 1200]\n\nexport const ThemeSongUrl = \"https://raw.githubusercontent.com/PhilVargas/tetris/master/public/assets/music/Tetris%20Theme%20-%20Long.ogg\"\n\nconst GameSettings: IGameSettings = {\n  hasGameBegun: false,\n  isPaused: false,\n  initialTurnDelay: 500,\n  totalLinesCleared: 0,\n  score: 0,\n  scoreThisTurn: 0,\n  minimumTurnDelay: 50,\n  isGameOver: false,\n  isColorblindModeEnabled: false,\n  isGhostEnabled: true,\n  isQueuePieceEnabled: true,\n  canQueuePiece: true,\n  isAudioMuted: false,\n}\n\nexport default GameSettings\n","import GameSettings from './GameSettings'\nexport * from './GameSettings'\n\nexport default GameSettings\n","import { PieceType, PieceShape, IPieceOffset, ICoordinate, Rotation, RotationDirection, BoardCells, CellType, IBoardCell, LinesCleared, Level } from '../typings'\nimport { GameSettings, BoardSettings, PieceShapeMap, PossibleBaseScorePerTurn } from '../constants/Settings'\n\nconst cellIndexFromCoords = (coordinate: ICoordinate): number => {\n  const { xCoord, yCoord } = coordinate\n  return xCoord + (BoardSettings.width * yCoord)\n}\n\nconst getCellIdsForPiece = (coordinate: ICoordinate, rotation: Rotation, currentPieceType: PieceType): Array<number> => {\n  const { xCoord, yCoord } = coordinate\n  const shape: PieceShape = PieceShapeMap[currentPieceType][rotation]\n  return shape.reduce((cellIds: Array<number>, pieceOffset: IPieceOffset): Array<number> => {\n    const offsetXCoord = xCoord + pieceOffset.x\n    const offsetYCoord = yCoord + pieceOffset.y\n    const coordinate: ICoordinate = { xCoord: offsetXCoord, yCoord: offsetYCoord }\n    cellIds.push(cellIndexFromCoords(coordinate))\n    return cellIds\n  }, [])\n}\n\nconst getCellRows = (cells: BoardCells): Array<BoardCells> => {\n  return [...Array(BoardSettings.height)].reduce((rows: Array<BoardCells>, _, rowStart: number) => {\n    rows.push(cells.slice(rowStart * BoardSettings.width, (rowStart + 1) * BoardSettings.width))\n    return rows\n  }, [])\n}\n\nconst isRowFrozen = (row: BoardCells): boolean => {\n  return row.every((cell: IBoardCell) => {\n    return cell.cellType !== CellType.E\n  })\n}\n\nconst isAnyRowFrozen = (cells: BoardCells): boolean => {\n  return getCellRows(cells).some(isRowFrozen)\n}\n\nconst getFrozenRowIndices = (cells: BoardCells): Array<number> => {\n  return getCellRows(cells).map((cellRow: BoardCells, index: number): number => {\n    return isRowFrozen(cellRow) ? index : -1\n  }).filter((rowIndex: number) => rowIndex >= 0)\n}\n\nconst hasCellCollision = (nextPieceCoordinate: ICoordinate, cells: BoardCells): boolean => {\n  const { xCoord: nextXCoordinate, yCoord: nextYCoordinate } = nextPieceCoordinate\n  const willEncounterXBoundary = nextXCoordinate < 0 || nextXCoordinate >= BoardSettings.width\n  const willEncounterYBoundary = nextYCoordinate >= BoardSettings.height\n  // const nextPieceCell = cells[cellIndexFromCoords(nextPieceCoordinate)] as IBoardCell?\n  const nextPieceCell = cells[cellIndexFromCoords(nextPieceCoordinate)] as IBoardCell | null\n  const willEncounterFrozenPiece = nextPieceCell != null && nextPieceCell.cellType !== CellType.E\n  return willEncounterXBoundary || willEncounterYBoundary || willEncounterFrozenPiece\n}\n\nconst hasCollision = (nextPieceCoordinate: ICoordinate, rotation: Rotation, currentPieceType: PieceType, cells: BoardCells): boolean => {\n  const shape = PieceShapeMap[currentPieceType][rotation]\n  const { xCoord: nextXCoordinate, yCoord: nextYCoordinate } = nextPieceCoordinate\n  return shape.some((pieceOffset: IPieceOffset) => {\n    const { x: xOffset, y: yOffset } = pieceOffset\n    const nextCellCoordinate: ICoordinate = { xCoord: nextXCoordinate + xOffset, yCoord: nextYCoordinate + yOffset }\n    return hasCellCollision(nextCellCoordinate, cells)\n  })\n}\n\nconst isCollisionFree = (nextPieceCoordinate: ICoordinate, rotation: Rotation, currentPieceType: PieceType, cells: BoardCells): boolean => {\n  return !hasCollision(nextPieceCoordinate, rotation, currentPieceType, cells)\n}\n\n\nconst rotation = (currentRotation: Rotation, rotationDirection: RotationDirection): Rotation => {\n  return Math.abs((4 + currentRotation + rotationDirection) % 4) as Rotation\n}\n\nconst dropCoordinate = (cells: BoardCells, rotation: Rotation, currentPieceType: PieceType, currentCoordinate: ICoordinate): ICoordinate => {\n  const { xCoord, yCoord } = currentCoordinate\n  let nextYCoord = yCoord\n  while (!hasCollision({ xCoord, yCoord: nextYCoord + 1 }, rotation, currentPieceType, cells)) {\n    nextYCoord++\n  }\n  return { xCoord, yCoord: nextYCoord }\n}\n\nconst getCellIdsForGhost = (cells: BoardCells, rotation: Rotation, currentPieceType: PieceType, currentCoordinate: ICoordinate): Array<number> => {\n  const { xCoord } = currentCoordinate\n  const { yCoord } = dropCoordinate(cells, rotation, currentPieceType, currentCoordinate)\n  return getCellIdsForPiece({ xCoord, yCoord }, rotation, currentPieceType)\n}\n\nconst level = (totalLinesCleared: number): Level => {\n  return Math.min(10, Math.floor(totalLinesCleared / 10)) as Level\n}\n\nconst scoreThisTurn = (linesClearedThisTurn: LinesCleared, scoreMultiplier: Level): number => {\n  return PossibleBaseScorePerTurn[linesClearedThisTurn] * (1 + scoreMultiplier)\n}\n\nconst turnDelay = (level: Level) => {\n  return Math.max(GameSettings.minimumTurnDelay, GameSettings.initialTurnDelay - (50 * level))\n}\n\nconst didPlayerLose = (cells: BoardCells): boolean => {\n  return cells.some((cell: IBoardCell) => {\n    return cell.pieceType != null && cell.id < BoardSettings.width * BoardSettings.hiddenRows\n  })\n}\n\nconst Calculate = {\n  didPlayerLose,\n  turnDelay,\n  level,\n  scoreThisTurn,\n  cellIndexFromCoords,\n  dropCoordinate,\n  getCellIdsForPiece,\n  getCellIdsForGhost,\n  hasCollision,\n  isCollisionFree,\n  rotation,\n  getCellRows,\n  isAnyRowFrozen,\n  getFrozenRowIndices,\n}\n\nexport default Calculate\n","import { IBoardCell, CellType, IGameState, PieceType, BoardCells, IScoredBoardCells, LinesCleared } from '../typings'\nimport { BoardSettings, GameSettings } from '../constants/Settings'\nimport Calculate from './Calculator'\nimport { Pieces } from '../constants/Settings/GameSettings'\n\nconst generateDefaultCells = (rows = BoardSettings.height): Array<IBoardCell> => {\n  return [...Array(rows)].reduce((cells: Array<IBoardCell>, _, yCoord: number) => {\n    return [...Array(BoardSettings.width)].reduce((cells: Array<IBoardCell>, _, xCoord: number) => {\n      cells.push({\n        id: Calculate.cellIndexFromCoords({ xCoord, yCoord }),\n        yCoord,\n        xCoord,\n        isFrozen: false,\n        cellType: CellType.E\n      })\n      return cells\n    }, cells)\n  }, [])\n}\n\nconst generateShiftedCells = (atRowIndex: number, cells: BoardCells): BoardCells => {\n  const shiftedId = (atRowIndex + 1) * BoardSettings.width\n  const shiftedCells = cells.map((shiftedCell: IBoardCell): IBoardCell => {\n    if (shiftedCell.id < shiftedId) {\n      const cell = cells[shiftedCell.id - BoardSettings.width]\n      return { ...cell, id: shiftedCell.id }\n    } else {\n      return shiftedCell\n    }\n  }).slice(BoardSettings.width, BoardSettings.height * BoardSettings.width)\n  const emptyCells = generateDefaultCells(1)\n  return emptyCells.concat(shiftedCells)\n}\n\nconst scoreRowsForTurn = (boardCells: BoardCells, totalLinesCleared: number): IScoredBoardCells => {\n  let linesClearedThisTurn: LinesCleared = 0\n  let cells = [...boardCells]\n  while (Calculate.isAnyRowFrozen(cells)) {\n    linesClearedThisTurn = linesClearedThisTurn + 1 as LinesCleared\n    const lowestFrozenRowIndex = Calculate.getFrozenRowIndices(cells).pop()\n    if (lowestFrozenRowIndex == null) { break }\n    cells = generateShiftedCells(lowestFrozenRowIndex, cells)\n  }\n  const scoreThisTurn = Calculate.scoreThisTurn(linesClearedThisTurn, Calculate.level(totalLinesCleared))\n  return { cells, scoreThisTurn, linesClearedThisTurn }\n}\nconst generateRandomPieceType = (): PieceType => {\n  const randomIndex = Math.floor(Math.random() * Pieces.length)\n  return Pieces[randomIndex]\n}\n\nconst freezeCells = (cells: BoardCells, pieceIds: Array<number>, currentPieceType: PieceType): BoardCells => {\n  return cells.map((cell: IBoardCell) => {\n    if (pieceIds.includes(cell.id)) {\n      cell.cellType = currentPieceType\n    }\n    return cell\n  })\n}\n\nconst GameUtil = {\n  generateDefaultCells,\n  generateRandomPieceType,\n  generateShiftedCells,\n  freezeCells,\n  scoreRowsForTurn,\n  generateInitialState: (): IGameState => {\n    return {\n      isGameOver: GameSettings.isGameOver,\n      xCoord: BoardSettings.xCoord,\n      yCoord: BoardSettings.yCoord,\n      pieceIds: BoardSettings.pieceIds,\n      rotation: BoardSettings.rotation,\n      isPaused: GameSettings.isPaused,\n      hasGameBegun: GameSettings.hasGameBegun,\n      totalLinesCleared: GameSettings.totalLinesCleared,\n      score: GameSettings.score,\n      scoreThisTurn: GameSettings.scoreThisTurn,\n      turnDelay: GameSettings.initialTurnDelay,\n      cells: generateDefaultCells(),\n      currentPieceType: generateRandomPieceType(),\n      nextPieceType: generateRandomPieceType(),\n      isColorblindModeEnabled: GameSettings.isColorblindModeEnabled,\n      isGhostEnabled: GameSettings.isGhostEnabled,\n      isQueuePieceEnabled: GameSettings.isQueuePieceEnabled,\n      canQueuePiece: GameSettings.canQueuePiece,\n      isAudioMuted: GameSettings.isAudioMuted,\n    }\n  }\n}\n\nexport default GameUtil\n","import { Subject } from 'rxjs'\nimport { Dispatch, SetStateAction } from 'react'\n\nimport GameUtil from '../utils/GameUtil'\nimport { IGameState, IBoardCell, IPieceOffset, BoardCells, PieceType, ICoordinate, RotationDirection, IPersistentSettings } from '../typings'\nimport Calculate from '../utils/Calculator'\nimport { BoardSettings } from '../constants/Settings'\n\nconst subject = new Subject<IGameState>()\n\nlet state = GameUtil.generateInitialState()\n\nconst updateCells = (cells: BoardCells, currentPieceType: PieceType, pieceIds: Array<number>, ghostPieceIds: Array<number>): BoardCells => {\n  return cells.map((boardCell: IBoardCell) => {\n    if (pieceIds.includes(boardCell.id)) {\n      boardCell.pieceType = currentPieceType\n    } else {\n      boardCell.pieceType = undefined\n    }\n\n    if (ghostPieceIds.includes(boardCell.id)) {\n      boardCell.ghostType = currentPieceType\n    } else {\n      boardCell.ghostType = undefined\n    }\n    return boardCell\n  })\n}\n\nconst freezeCells = (cells: BoardCells): BoardCells => {\n  return cells.map((boardCell: IBoardCell) => {\n    if (boardCell.pieceType != null) {\n      boardCell.cellType = boardCell.pieceType\n    }\n    return boardCell\n  })\n}\n\nconst updatePieceCoordinates = (offset: IPieceOffset) => {\n  const { x: xOffset, y: yOffset } = offset\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n  if (!hasGameBegun || isPaused) { return }\n  const nextXCoord = xOffset + xCoord\n  const nextYCoord = yOffset + yCoord\n\n  const nextCoord: ICoordinate = { xCoord: nextXCoord, yCoord: nextYCoord }\n  const hasCollision = Calculate.hasCollision(nextCoord, rotation, currentPieceType, state.cells)\n\n  if (hasCollision) { return }\n\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord: nextXCoord, yCoord: nextYCoord }, rotation, currentPieceType)\n  const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, currentPieceType, nextCoord)\n  const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n  state = { ...state, xCoord: nextXCoord, yCoord: nextYCoord, cells }\n  subject.next(state)\n}\n\nconst startGame = () => {\n  const { isAudioMuted, isGhostEnabled, isQueuePieceEnabled, isColorblindModeEnabled } = state\n  const staticSettings: IPersistentSettings = { isAudioMuted, isGhostEnabled, isQueuePieceEnabled, isColorblindModeEnabled }\n  const initialState = GameUtil.generateInitialState()\n  const { xCoord, yCoord, rotation } = initialState\n  const currentPieceType = GameUtil.generateRandomPieceType()\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, rotation, currentPieceType)\n  const ghostPieceIds = Calculate.getCellIdsForGhost(initialState.cells, rotation, currentPieceType, { xCoord, yCoord })\n  const cells = updateCells(initialState.cells, currentPieceType, pieceIds, ghostPieceIds)\n  state = {\n    ...initialState,\n    ...staticSettings,\n    cells,\n    currentPieceType,\n    xCoord: xCoord,\n    yCoord: yCoord,\n    hasGameBegun: true,\n    isPaused: false,\n  }\n\n\n  subject.next(state)\n}\n\nconst togglePause = () => {\n  if (!state.hasGameBegun) { return }\n  state = { ...state, isPaused: !state.isPaused }\n  subject.next(state)\n}\n\nconst nextTurn = () => {\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun, nextPieceType } = state\n  if (!hasGameBegun || isPaused) { return }\n  const nextYCoord = yCoord + 1\n\n  if (Calculate.isCollisionFree({ xCoord, yCoord: nextYCoord }, rotation, currentPieceType, state.cells)) {\n    const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord: nextYCoord }, rotation, currentPieceType)\n    const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, currentPieceType, { xCoord, yCoord: nextYCoord })\n    const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n    state = { ...state, xCoord: xCoord, yCoord: nextYCoord, cells, scoreThisTurn: 0 }\n    subject.next(state)\n  } else {\n    const frozenCells = freezeCells(state.cells)\n    if (Calculate.didPlayerLose(frozenCells)) {\n      state = { ...state, isGameOver: true, cells: frozenCells, scoreThisTurn: 0 }\n      subject.next(state)\n    } else {\n      const { cells: boardCells, scoreThisTurn, linesClearedThisTurn } = GameUtil.scoreRowsForTurn(frozenCells, state.totalLinesCleared)\n      const randomPieceType = GameUtil.generateRandomPieceType()\n      const { xCoord: defaultXCoord, yCoord: defaultYCoord, rotation: defaultRotation } = BoardSettings\n      const pieceIds = Calculate.getCellIdsForPiece({ xCoord: defaultXCoord, yCoord: defaultYCoord }, defaultRotation, nextPieceType)\n      const ghostPieceIds = Calculate.getCellIdsForGhost(boardCells, defaultRotation, nextPieceType, { xCoord: defaultXCoord, yCoord: defaultYCoord })\n      const cells = updateCells(boardCells, nextPieceType, pieceIds, ghostPieceIds)\n      const totalLinesCleared = state.totalLinesCleared + linesClearedThisTurn\n      state = {\n        ...state,\n        xCoord: defaultXCoord,\n        yCoord: defaultYCoord,\n        currentPieceType: nextPieceType,\n        nextPieceType: randomPieceType,\n        cells,\n        rotation: defaultRotation,\n        totalLinesCleared: totalLinesCleared,\n        turnDelay: Calculate.turnDelay(Calculate.level(totalLinesCleared)),\n        canQueuePiece: true,\n        score: state.score + scoreThisTurn,\n        scoreThisTurn\n      }\n      subject.next(state)\n    }\n  }\n}\n\nconst toggleColorblindMode = () => {\n  state = { ...state, isColorblindModeEnabled: !state.isColorblindModeEnabled }\n  subject.next(state)\n}\n\nconst toggleGhost = () => {\n  state = { ...state, isGhostEnabled: !state.isGhostEnabled }\n  subject.next(state)\n}\n\nconst toggleQueuePiece = () => {\n  state = { ...state, isQueuePieceEnabled: !state.isQueuePieceEnabled }\n  subject.next(state)\n}\n\nconst toggleAudio = () => {\n  state = { ...state, isAudioMuted: !state.isAudioMuted }\n  subject.next(state)\n}\n\nconst swapQueuePiece = () => {\n  const { isQueuePieceEnabled, canQueuePiece, currentPieceType, nextPieceType, queuePieceType } = state\n  if (isQueuePieceEnabled && canQueuePiece) {\n    let newPieceType: PieceType\n    let newNextPieceType: PieceType\n    const newQueuePieceType = currentPieceType\n    if (queuePieceType != null) {\n      newPieceType = queuePieceType\n      newNextPieceType = nextPieceType\n    } else {\n      newPieceType = nextPieceType\n      newNextPieceType = GameUtil.generateRandomPieceType()\n    }\n    const { xCoord, yCoord, rotation } = BoardSettings\n    const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, rotation, newPieceType)\n    const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, rotation, newPieceType, { xCoord, yCoord })\n    const cells = updateCells(state.cells, newPieceType, pieceIds, ghostPieceIds)\n    state = { ...state, currentPieceType: newPieceType, nextPieceType: newNextPieceType, queuePieceType: newQueuePieceType, canQueuePiece: false, xCoord, yCoord, rotation, cells }\n    subject.next(state)\n  }\n}\n\nconst dropPiece = () => {\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n  if (!hasGameBegun || isPaused) { return }\n  const { yCoord: finalYCoord } = Calculate.dropCoordinate(state.cells, rotation, currentPieceType, { xCoord, yCoord })\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord: finalYCoord }, rotation, currentPieceType)\n  const cells = updateCells(state.cells, currentPieceType, pieceIds, pieceIds)\n  state = { ...state, yCoord: finalYCoord, cells }\n  subject.next(state)\n}\n\nconst rotatePiece = (rotationDirection: RotationDirection) => {\n  const { xCoord, yCoord, currentPieceType, rotation, isPaused, hasGameBegun } = state\n  if (!hasGameBegun || isPaused) { return }\n  const nextRotation = Calculate.rotation(rotation, rotationDirection)\n  const nextCoord = { xCoord, yCoord }\n  const hasCollision = Calculate.hasCollision(nextCoord, nextRotation, currentPieceType, state.cells)\n\n  if (hasCollision) { return }\n\n  const pieceIds = Calculate.getCellIdsForPiece({ xCoord, yCoord }, nextRotation, currentPieceType)\n  const ghostPieceIds = Calculate.getCellIdsForGhost(state.cells, nextRotation, currentPieceType, { xCoord, yCoord })\n  const cells = updateCells(state.cells, currentPieceType, pieceIds, ghostPieceIds)\n  state = { ...state, rotation: nextRotation, cells }\n  subject.next(state)\n}\n\nconst gameStore = {\n  generateInitialState: GameUtil.generateInitialState,\n  init: () => subject.next(state),\n  subscribe: (setState: Dispatch<SetStateAction<IGameState>>) => subject.subscribe(setState),\n  unsubcribe: () => { subject.unsubscribe() },\n  startGame,\n  updatePieceCoordinates,\n  nextTurn,\n  togglePause,\n  toggleColorblindMode,\n  toggleGhost,\n  toggleQueuePiece,\n  toggleAudio,\n  swapQueuePiece,\n  dropPiece,\n  rotatePiece,\n}\n\nexport default gameStore\n","import Cell from './Cell'\n\nexport default Cell\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Cell.module.scss'\nimport { ICellProps } from '../../typings'\n\nconst Cell: FC<ICellProps> = ({ className, isHidden, isGhost, isPiece, cellType, isColorblindModeEnabled, isGhostEnabled, ...styleProps }) => {\n  const computedClassName = cn(className, styles.wrapper, styles[`cellType${cellType}`], {\n    [styles.colorBlind]: isColorblindModeEnabled,\n    [styles.hiddenRow]: isHidden,\n    [styles.ghost]: isGhost && isGhostEnabled,\n    [styles.piece]: isPiece\n  })\n  return (\n    <div style={{ ...styleProps }} className={computedClassName}></div>\n  )\n}\n\nexport default Cell\n","import Board from './Board'\n\nexport default Board\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Board.module.scss'\n\nimport { CellSettings, BoardSettings } from '../../constants/Settings'\nimport Cell from '../Cell'\nimport { IBoardProps, CellType } from '../../typings'\nimport Calculate from '../../utils/Calculator'\n\nconst Board: FC<IBoardProps> = ({ cells, isColorblindModeEnabled, isGhostEnabled }) => {\n  const generateCells = (yCoord: number) => {\n    return [...Array(BoardSettings.width)].map((_, xCoord: number) => {\n      const cellId = Calculate.cellIndexFromCoords({ xCoord, yCoord })\n      const cell = cells[cellId]\n      const cellType: CellType = cell.pieceType || (isGhostEnabled && cell.ghostType) || cell.cellType\n      const isHidden = yCoord < BoardSettings.hiddenRows\n      const isGhost = cell.ghostType != null && cell.pieceType == null\n      const isPiece = cell.pieceType != null\n\n      return <Cell key={cell.id}\n        isHidden={isHidden}\n        isGhost={isGhost}\n        isPiece={isPiece}\n        cellType={cellType}\n        width={CellSettings.edgeLength}\n        height={CellSettings.edgeLength}\n        isColorblindModeEnabled={isColorblindModeEnabled}\n        isGhostEnabled={isGhostEnabled}\n      />\n    })\n  }\n\n  const generateRows = () => {\n    return [...Array(BoardSettings.height)].map((_, yCoord: number) => {\n      return (\n        <div key={yCoord} className={cn(styles.rows, {})} style={{ maxHeight: CellSettings.edgeLength }}>\n          {generateCells(yCoord)}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className={cn(styles.wrapper)}>\n      {generateRows()}\n    </div>)\n}\n\nexport default Board\n","import Overlay from './Overlay'\n\nexport default Overlay\n","import React, { FC, MouseEvent } from 'react'\nimport cn from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\n\nimport styles from './Overlay.module.scss'\nimport { IOverlayProps } from '../../typings'\n\n\nconst Overlay: FC<IOverlayProps> = ({ isPaused, hasGameBegun, startGame, score, isGameOver, isAudioMuted }) => {\n  if (hasGameBegun && !isPaused && !isGameOver) { return null }\n\n  const buttonText = cn({\n    \"Start\": !hasGameBegun,\n    \"Restart\": hasGameBegun && isGameOver\n  })\n\n  const onClick = (e: MouseEvent<HTMLButtonElement, any>) => {\n    e.preventDefault()\n    startGame()\n  }\n\n\n  const audioText = cn('Audio is', {\n    Enabled: !isAudioMuted,\n    Disabled: isAudioMuted\n  })\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.container}>\n        {isGameOver &&\n          [\n            <p className={styles.overlayText}>Game over!</p>,\n            <p className={styles.overlayText}>{`Score: ${score}`}</p>\n          ]\n        }\n        {(!hasGameBegun || isGameOver) &&\n          <button className=\"btn\" onClick={onClick}>{buttonText}</button>\n        }\n        {!hasGameBegun &&\n          <p className={styles.overlayText}>({audioText})</p>\n        }\n        {hasGameBegun && !isGameOver &&\n          <div className={styles.overlayText}>\n            <FontAwesomeIcon icon={faPause} size=\"4x\" />\n          </div>\n        }\n      </div>\n    </div >\n  )\n}\n\nexport default Overlay\n","import DisplayPiece from './DisplayPiece'\n\nexport default DisplayPiece\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './DisplayPiece.module.scss'\nimport colorStyles from '../Cell/Cell.module.scss'\nimport { IDisplayPieceProps } from '../../typings'\n\n\nconst DisplayPiece: FC<IDisplayPieceProps> = ({ pieceType, isEnabled, title, isActive, isColorblindModeEnabled }) => {\n  const colorName = `cellType${pieceType}`\n  const className = cn(styles.pieceCell, styles[colorName], colorStyles[colorName], {\n    [colorStyles.colorBlind]: isColorblindModeEnabled\n  })\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div>{title}</div>\n      <div className={cn(styles.displayWrapper, { [styles.disabled]: !isEnabled || pieceType == null || !isActive })}>\n        {isEnabled && pieceType != null &&\n          [\n            <div key={0} className={className}></div>,\n            <div key={1} className={className}></div>,\n            <div key={2} className={className}></div>,\n            <div key={3} className={className}></div>,\n          ]\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default DisplayPiece\n","import Legend from './Legend'\n\nexport default Legend\n","import React, { FC } from 'react'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport cn from 'classnames'\n\nimport styles from './Legend.module.scss'\nimport './LegendTransition.scss'\n\nimport { ILegendProps } from '../../typings'\n\nconst Legend: FC<ILegendProps> = ({ level, score, scoreThisTurn }) => {\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div className={cn(styles.scoreRow)}>\n        <span className={cn(styles.scoreItem)}>score: {score}</span>\n        <ReactCSSTransitionGroup transitionLeave={false} transitionName=\"incremented-score\" transitionEnterTimeout={500}>\n          <span key={score} className={cn('incremented-score', styles.scoreThisTurn)}>+{scoreThisTurn}</span>\n        </ReactCSSTransitionGroup>\n      </div>\n      <div>level: {level}</div>\n      <div>move with <pre className={cn(styles.code)}>ASD</pre></div>\n      <div>drop with <pre className={cn(styles.code)}>ASD</pre></div>\n      <div>rotate with <pre className={cn(styles.code)}>q</pre> & <pre className={cn(styles.code)}>e</pre></div>\n      <div><pre className={cn(styles.code)}>space</pre> to pause</div>\n      <div><pre className={cn(styles.code)}>enter</pre> to queue a piece</div>\n    </div>\n  )\n}\n\nexport default Legend\n","import Switch from './Switch'\n\nexport default Switch\n","import React, { FC } from 'react'\n\nimport { ISwitchProps } from '../../typings'\n\n\n\nconst Switch: FC<ISwitchProps> = ({ className, labelText, isChecked, onChange }) => {\n  return (\n    <label className={className}>\n      <span>{labelText}</span>\n      <input type=\"checkbox\" checked={isChecked} onChange={onChange}></input>\n    </label>\n  )\n}\n\nexport default Switch\n","import Dashboard from './Dashboard'\n\nexport default Dashboard\n","import React, { FC } from 'react'\nimport cn from 'classnames'\n\nimport styles from './Dashboard.module.scss'\nimport { IDashboardProps } from '../../typings'\n\nimport Switch from '../Switch'\n\nconst Dashboard: FC<IDashboardProps> = ({ isColorblindModeEnabled, onColorblindChange, isGhostEnabled, onGhostChange, isQueuePieceEnabled, onQueueChange, isAudioMuted, onAudioChange }) => {\n  return (\n    <div className={cn(styles.wrapper)}>\n      <div className={cn(styles.header)}>settings</div>\n      <Switch\n        className={cn(styles.ghostContainer)}\n        labelText={\"ghost\"}\n        isChecked={isGhostEnabled}\n        onChange={onGhostChange}\n      />\n      <Switch\n        className={cn(styles.queueContainer)}\n        labelText={\"queue\"}\n        isChecked={isQueuePieceEnabled}\n        onChange={onQueueChange}\n      />\n      <Switch\n        className={cn(styles.audioContainer)}\n        labelText={\"Music\"}\n        isChecked={!isAudioMuted}\n        onChange={onAudioChange}\n      />\n      <Switch\n        className={cn(styles.colorblindContainer)}\n        labelText={\"colorblind mode\"}\n        isChecked={isColorblindModeEnabled}\n        onChange={onColorblindChange}\n      />\n    </div>\n  )\n}\n\nexport default Dashboard\n","import ThemeSong from './ThemeSong'\n\nexport default ThemeSong\n","import React, { FC, useRef, useEffect } from 'react'\nimport cn from 'classnames'\n\nimport { IThemeSongProps } from '../../typings'\nimport { ThemeSongUrl } from '../../constants/Settings'\n\nimport styles from './ThemeSong.module.scss'\n\nconst ThemeSong: FC<IThemeSongProps> = ({ isAudioMuted, isPaused, hasGameBegun }) => {\n  const audioEl = useRef<HTMLAudioElement>(null)\n\n  useEffect(() => {\n    if (audioEl.current == null) { return }\n    if (isAudioMuted || isPaused || !hasGameBegun) {\n      audioEl.current.pause()\n    } else {\n      audioEl.current.play()\n    }\n  })\n\n  return (\n    <div className={cn(styles.wrapper)}>\n      <audio ref={audioEl} src={ThemeSongUrl} loop />\n    </div>\n  )\n}\n\nexport default ThemeSong\n","import React, { FC, useState, useLayoutEffect, useEffect } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\nimport { faLinkedin, faGithub, faStackOverflow } from '@fortawesome/free-brands-svg-icons'\nimport './App.scss'\n\nimport { IBoardProps, IDashboardProps, IDisplayPieceProps, IThemeSongProps, IOverlayProps, ILegendProps } from './typings'\nimport gameStore from './store/game'\nimport Board from './components/Board'\nimport Overlay from './components/Overlay'\nimport DisplayPiece from './components/DisplayPiece'\nimport Legend from './components/Legend'\nimport Calculate from './utils/Calculator'\nimport Dashboard from './components/Dashboard'\nimport ThemeSong from './components/ThemeSong'\n\nconst App: FC = () => {\n  const [gameState, setgameState] = useState(gameStore.generateInitialState())\n\n  useEffect(() => {\n    let id: NodeJS.Timeout\n\n    function tick() {\n      id = setTimeout(tick, gameState.turnDelay)\n      if (gameState.hasGameBegun && !gameState.isGameOver) {\n        gameStore.nextTurn()\n      }\n    }\n    id = setTimeout(tick, gameState.turnDelay)\n    return () => {\n      clearTimeout(id)\n    }\n  }, [gameState.turnDelay, gameState.hasGameBegun, gameState.isGameOver])\n\n  useLayoutEffect(() => {\n    gameStore.subscribe(setgameState)\n    gameStore.init()\n\n    window.addEventListener('keyup', (e) => {\n      e.preventDefault()\n\n      switch (e.key) {\n        case ' ':\n          gameStore.togglePause()\n          break\n        case 'Enter':\n          gameStore.swapQueuePiece()\n          break\n        case 'ArrowUp':\n        case 'w':\n          gameStore.dropPiece()\n          break\n      }\n    })\n\n    window.addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'ArrowDown':\n        case 's':\n          gameStore.updatePieceCoordinates({ x: 0, y: 1 })\n          break\n        case 'ArrowRight':\n        case 'd':\n          gameStore.updatePieceCoordinates({ x: 1, y: 0 })\n          break\n        case 'ArrowLeft':\n        case 'a':\n          gameStore.updatePieceCoordinates({ x: -1, y: 0 })\n          break\n        case 'q':\n          gameStore.rotatePiece(-1)\n          break\n        case 'e':\n          gameStore.rotatePiece(1)\n          break\n      }\n    })\n\n    return () => {\n      gameStore.unsubcribe()\n    }\n  }, [setgameState])\n\n  const {\n    cells,\n    isPaused,\n    hasGameBegun,\n    score,\n    scoreThisTurn,\n    isGameOver,\n    nextPieceType,\n    totalLinesCleared,\n    isColorblindModeEnabled,\n    isGhostEnabled,\n    queuePieceType,\n    isQueuePieceEnabled,\n    canQueuePiece,\n    isAudioMuted,\n  } = gameState\n\n  const {\n    toggleColorblindMode: onColorblindChange,\n    toggleGhost: onGhostChange,\n    toggleQueuePiece: onQueueChange,\n    toggleAudio: onAudioChange,\n    startGame,\n  } = gameStore\n\n  const overlayProps: IOverlayProps = {\n    score,\n    isAudioMuted,\n    isGameOver,\n    isPaused,\n    hasGameBegun,\n    startGame,\n  }\n\n  const boardProps: IBoardProps = {\n    cells,\n    isColorblindModeEnabled,\n    isGhostEnabled,\n  }\n\n  const dashBoardProps: IDashboardProps = {\n    isColorblindModeEnabled,\n    isGhostEnabled,\n    onColorblindChange,\n    onGhostChange,\n    isQueuePieceEnabled,\n    onQueueChange,\n    isAudioMuted,\n    onAudioChange,\n  }\n\n  const queuePieceProps: IDisplayPieceProps = {\n    pieceType: queuePieceType,\n    isEnabled: hasGameBegun && isQueuePieceEnabled,\n    isActive: canQueuePiece,\n    isColorblindModeEnabled,\n    title: \"Queue Piece\"\n  }\n\n  const nextPieceProps: IDisplayPieceProps = {\n    pieceType: nextPieceType,\n    isEnabled: hasGameBegun,\n    isActive: true,\n    isColorblindModeEnabled,\n    title: \"Next Piece\"\n  }\n\n  const themeSongProps: IThemeSongProps = { isAudioMuted, isPaused, hasGameBegun }\n\n  const legendProps: ILegendProps = { score, scoreThisTurn, level: Calculate.level(totalLinesCleared) }\n\n  return (\n    <div className=\"App\">\n      <ThemeSong {...themeSongProps} />\n      <div className=\"left-panel\">\n        <div className=\"flex flex-stretch\">\n          <div className=\"panel legend-container\">\n            <Legend {...legendProps} />\n          </div>\n          <div className=\"panel\">\n            <Dashboard {...dashBoardProps} />\n          </div>\n        </div>\n      </div>\n      <div className=\"board-anchor\">\n        <Overlay {...overlayProps} />\n        <Board {...boardProps} />\n      </div>\n      <div className=\"right-panel\">\n        <div className=\"flex flex-stretch\">\n          <div className=\"panel callout display-piece-container\">\n            <DisplayPiece {...nextPieceProps} />\n            <DisplayPiece {...queuePieceProps} />\n          </div>\n          <div className=\"attributions panel\">\n            <h4>Tetris by Philip A Vargas</h4>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/philipavargas\">\n              <FontAwesomeIcon icon={faLinkedin} />\n              <span>philipavargas</span>\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/PhilVargas\">\n              <FontAwesomeIcon icon={faGithub} />\n              <span>@PhilVargas</span>\n            </a>\n            <div>\n              <FontAwesomeIcon icon={faEnvelope} />\n              <span>philipavargas@gmail.com</span>\n            </div>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://stackoverflow.com/users/3213605/philvarg?tab=profile\">\n              <FontAwesomeIcon icon={faStackOverflow} />\n              <span>@philvarg</span>\n            </a>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/PhilVargas/tetris\">\n              <FontAwesomeIcon icon={faGithub} />\n              <span>View Source Code</span>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cell_wrapper__2MkW_\",\"hiddenRow\":\"Cell_hiddenRow__RTa-l\",\"ghost\":\"Cell_ghost__187eQ\",\"piece\":\"Cell_piece__2bO9a\",\"cellTypeE\":\"Cell_cellTypeE__1CPQX\",\"cellTypeI\":\"Cell_cellTypeI__2sB7U\",\"colorBlind\":\"Cell_colorBlind__1DC9G\",\"cellTypeO\":\"Cell_cellTypeO__2En99\",\"cellTypeZ\":\"Cell_cellTypeZ__2aDlK\",\"cellTypeS\":\"Cell_cellTypeS__2w4kE\",\"cellTypeT\":\"Cell_cellTypeT__3M3rs\",\"cellTypeJ\":\"Cell_cellTypeJ__2EFPF\",\"cellTypeL\":\"Cell_cellTypeL__aHhEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Overlay_wrapper__3o-Dm\",\"container\":\"Overlay_container__3Xi3_\",\"hide\":\"Overlay_hide__Hd5ip\",\"overlayText\":\"Overlay_overlayText__3baGs\"};"],"sourceRoot":""}